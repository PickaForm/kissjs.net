kiss.app.defineView({id:"calendar-content",renderer:function(id,target){let fakeModelTemplate=createFakeModel();fakeModelTemplate.id="fakeCalendar";let fakeModel=new kiss.data.Model(fakeModelTemplate);let fakeCollection=fakeModel.collection;let columns=fakeModel.getFieldsAsColumns();columns.forEach((column=>{column.hidden=!["gameName","category","platform","reviewed","ratingMetacritic"].includes(column.id)}));let calendar=createCalendar({id:"myCalendar",color:"#00aaee",collection:fakeCollection,period:"1 week + details",columns:columns,canEdit:true,canAddField:false,canEditField:false,canCreateRecord:true,dateField:"releaseDate",height:()=>kiss.screen.current.height-50,methods:{selectRecord:async record=>createForm(record,fakeModel),async createRecord(model){record=model.create();const success=await record.save();if(!success)return;createForm(record)}}});return createBlock({id:id,target:target,style:"user-select: none; background: #ffffff;",height:"100%",items:[calendar],methods:{load:()=>{if(fakeCollection.records.length>0)return;fakeCollection.insertFakeRecords(200)}}})}});kiss.doc.calendar=`\nKissJS calendars are simple components to display your data using one of their date field.\n`;kiss.app.defineView({id:"calendar-menu",renderer:function(id,target){return createBlock({id:id,target:target,defaultConfig:{height:40,textAlign:"left",iconSize:"18px",iconColor:"#8aa2c8",borderColor:"#e3e5ec",borderWidth:"1px 0px 0px 0px",borderRadius:"0px",backgroundColor:"#f3f5f7",colorHover:"#00aaee",iconColorHover:"#00aaee",backgroundColorHover:"#e5e9ec"},layout:"vertical",items:[{type:"html",html:"Calendar",class:"navigation-title"},{type:"button",text:"Example with 200 records",icon:"fas fa-info",action:()=>kiss.router.navigateTo({anchor:"Introduction about KissJS calendars"})},{type:"button",text:"Back to Home",icon:"fas fa-arrow-left",fontWeight:"bold",action:()=>kiss.router.navigateTo({ui:"start",section:"home"})}]})}});kiss.app.defineView({id:"cheatsheet-content",renderer:function(id,target){return createBlock({id:id,target:target,styles:{this:"user-select: none; background: #ffffff"},items:[showCase("General",kiss.doc.cheatsheetGeneral),showCase("Building UI",kiss.doc.cheatsheetUI),showCase("Building application views",kiss.doc.cheatsheetViews),showCase("Manipulating data",kiss.doc.cheatsheetData),showCase("ACL and Permissions",kiss.doc.cheatsheetACL),showCase("Localization",kiss.doc.cheatsheetLocalization),showCase("Miscellaneous tools",kiss.doc.cheatsheetMiscTools),showCase("Javascript prototypes",kiss.doc.cheatsheetPrototypes)]})}});kiss.doc.cheatsheetGeneral=`\n| Method or property | Description\n| --- | ---\n| <hr> **kiss.app** <hr>\n| kiss.app.defineView() | Defines a view\n| kiss.app.defineViewController() | Defines a view controller\n| kiss.app.defineModel() | Defines a model\n| kiss.app.defineTexts() | Defines translations\n| kiss.app.models | Contains all application models\n| kiss.app.collections | Contains all application collections\n| <hr> **kiss.router** <hr>\n| kiss.router.navigateTo() | Navigates to a view\n| kiss.router.getRoute() | Gets the current route\n| <hr> **kiss.ajax** <hr>\n| kiss.ajax.request() | Sends an AJAX request\n| kiss.ajax.setHost() | Sets the default host for AJAX requests\n| <hr> **kiss.screen** <hr>\n| kiss.screen.current.width | Current screen width\n| kiss.screen.current.height | Current screen height\n| kiss.screen.isTouch() | Returns true if the screen is touch\n| kiss.screen.getOrientation() | Returns the screen orientation "horizontal" or "vertical"\n| <hr> **kiss.pubsub** <hr>\n| kiss.pubsub.subscribe() | Subscribes to a topic\n| kiss.pubsub.unsubscribe() | Unsubscribes from a topic\n| kiss.pubsub.publish() | Publishes a message to a topic\n| <hr> **kiss.theme** <hr>\n| kiss.theme.set() | Sets the application theme\n| kiss.theme.get() | Gets the application theme\n| kiss.theme.select() | Displays a theme selection dialog\n| <hr> **kiss.language** <hr>\n| kiss.language.set() | Sets the application language\n| kiss.language.get() | Gets the application language\n| kiss.language.select() | Displays a language selection dialog\n| <hr> **kiss.session** <hr>\n| **(works only with KissJS server)** |\n| kiss.session.isOnline() | Returns true if the user is online\n| kiss.session.showLogin() | Displays the login dialog\n| kiss.session.logout() | Logs out the user\n| kiss.session.getUserId() | Current user id (email)\n| kiss.session.getUserName() | Current user name\n| kiss.session.setHost() | Sets session host and ports for http and websocket\n| kiss.session.getHttpHost() | Returns protocol, host and port (https:// your-host.com:443)\n| kiss.session.getWebsocketHost() | Returns protocol, host and port (wss:// your-host.com:443)\n`;kiss.doc.cheatsheetUI=`\n## Primitive elements\n\n| Function | Description\n| --- | ---\n| <hr> **Containers** <hr>\n| createBlock() | Creates a simple block container (= div)\n| createPanel() | Creates a panel container\n| <hr> **Elements** <hr>\n| createDialog() | Creates a dialog box\n| createMenu() | Creates a menu\n| createNotification() | Displays a notification\n| <hr> **Form** <hr>\n| createForm() | Creates a form from an instanciated Record (see Data & ORM section)\n\n## How to build your UI\n\nGenerally, you create a container (block or panel) and add elements to it.\nFor example, to create a panel with a title and a button:\n\n    const myPanel = createPanel({\n        title: "My panel",\n        items: [\n            {\n                type: "button", // Each element has a type\n                text: "Click me",\n                icon: "fas fa-check",\n                action: () => createNotification("Button clicked")\n            }\n        ]\n    })\n\n    myPanel.render() // To insert the panel into the DOM\n\n## Elements types\n\n| Type | Description\n| --- | ---\n| <hr> **Containers** <hr>\n| block | A simple block container\n| panel | A panel container\n| wizardPanel | A multi-view panel to create a wizard\n| <hr> **Elements** <hr>\n| button | A clickable button\n| dialog | A dialog box\n| html | A raw HTML element\n| image | An image\n| menu | A menu\n| notification | A notification\n| tip | A tooltip\n| spacer | A space between elements (useful to fill space in flex layouts)\n| <hr> **Fields** <hr>\n| field | A generic field for text, textarea, number or date\n| select | A select field (dropdown list with options)\n| checkbox | A checkbox\n| rating | A rating field\n| slider | A slider\n| color | A color field\n| colorPicker | A color picker\n| icon | An icon field\n| iconPicker | An icon picker\n| attachment | A file attachment field\n| <hr> **Data components** <hr>\n| datatable | A table to display data\n| calendar | A calendar\n| kanban | A kanban board\n| timeline | A timeline\n| gallery | A gallery view\n| chartView | A chart view (encapsulates Chart.js)\n| dashboard | A dashboard composed of multiple charts\n| <hr> **UI Extensions** (need to be imported separately for KissJS core)<hr>\n| aiImage | An image with AI generation\n| aiTextarea | A textarea with AI generation\n| codeEditor | A code editor (encapsulates Ace editor)\n| directory | A select field that displays people and groups of the address book\n| map | A map (encapsulates OpenLayers)\n| mapField | A map field (combo of a map and a text field to set the adress)\n| qrCode | A QR code generator\n| richTextField | A rich text field (encapsulates Quill editor)\n\n## Layouts\n\nWhen you build a UI, you split your screen into regions vertically or horizontally.\nFor this, you can use containers and their **layout** property:\n\n    createPanel({\n        title: "My panel",\n        layout: "horizontal", // or "vertical"\n        items: [\n            {\n                type: "button",\n                text: "Click me",\n                icon: "fas fa-check",\n                action: () => createNotification("Button clicked")\n            },\n            {\n                type: "button",\n                text: "Click me too",\n                icon: "fas fa-check",\n                action: () => createNotification("Another button clicked")\n            }\n        ]\n    }).render()\n\nInternally, this is the same as setting the CSS flex property to "row" or "column".\n\nComplex layouts can be achieved by **nesting containers**:\n\n    createPanel({\n        title: "My main panel",\n        layout: "vertical",\n        items: [\n            // Block 1\n            {\n                // When the type is not specified, it is a block by default\n                layout: "horizontal",\n                items: [\n                    {\n                        type: "button",\n                        text: "Click me",\n                        icon: "fas fa-check",\n                        action: () => createNotification("Button clicked")\n                    },\n                    {\n                        type: "button",\n                        text: "Click me too",\n                        icon: "fas fa-check",\n                        action: () => createNotification("Another button clicked")\n                    }\n                ]\n            },\n            // Block 2\n            {\n                layout: "horizontal",\n                items: [\n                    {\n                        type: "button",\n                        text: "Click me",\n                        icon: "fas fa-check",\n                        action: () => createNotification("Button clicked")\n                    },\n                    {\n                        type: "button",\n                        text: "Click me too",\n                        icon: "fas fa-check",\n                        action: () => createNotification("Another button clicked")\n                    }\n                ]\n            }\n        ]\n    }).render()\n\n## Styling\n\nComponents can be styled using main CSS properties directly in their configuration, using Javascript conventions:\n\n    createBlock({\n        width: 500, // Convert to "500px"\n        height: "30%",\n        margin: "10px 0",\n        padding: 20,\n        backgroundColor: "#f0f0f0",\n        border: "1px solid #ccc",\n        borderRadius: 10,\n        boxShadow: "0 0 10px rgba(0, 0, 0, 0.1)"\n        items: [\n            ...\n        ]\n    })\n\nYou can also use the **style** property to define the CSS inline style:\n\n    createBlock({\n        style: "width: 500px; height: 30%; margin: 10px 0; border-radius: 10px;",\n        items: [\n            ...\n        ]\n    })    \n\nNevertheless, it's generally recommanded to minimize the use of inline styles.\nInstead, use the **class** property to define your styles:\n\n    createBlock({\n        class: "my-bloc-style",\n        items: [\n            ...\n        ]\n    })\n\n## Applying a default configuration to all items of a container\n\nSometimes, it's useful to be able to style all items at once, to avoid repeating the same style for each element.\nKissJS allows that using the "defaultConfig" property:\n\n    createBlock({\n        defaultConfig: {\n            margin: 10,\n            padding: 10,\n            borderColor: "#00aaee"\n        },\n        items: [\n            ...\n        ]\n    })\n\nIn this example, all items will have a margin, padding and border color set to the default values. Those values can be overridden by the specific values of each item.\n\n## Events\n\nYou can attach any DOM events to a KissJS component adding an "events" property:\n\n    createPanel({\n        title: "My panel",\n        items: [\n            ...\n        ],\n        events: {\n            click: () => createNotification("Panel clicked"),\n            mouseover: () => createNotification("Panel hovered")\n        }\n    })\n\nTo minimize the syntax errors, event names are automatically standardized, so you can use whatever you want:\n    - onclick\n    - onClick\n    - click\n    - onMouseOver\n    - onmouseover\n    - mouseover\n    - etc...\n\n## Methods\n\nYou can add custom methods to your components, like this:\n\n    const myPanel = createPanel({\n        title: "My panel",\n        items: [\n            ...\n        ],\n        methods: {\n            myMethod1() {\n                createNotification("Method 1 called")\n            },\n            myMethod2() {\n                createNotification("Method 2 called")\n            }\n        }\n    })\n\n    myPanel.myMethod1() // To call the method 1\n\n## **Load** method\n\nYou can add a **load()** method if you need to load data into the component, or build/rebuild it dynamically.\n\nThe **load()** method is called:\n- at the component initialization\n- each time the component is displayed\n\nThe **load()** method can be asynchronous:\n\n    const myPanel = createPanel({\n        title: "My panel",\n        methods: {\n            async load() {\n                // Load your data\n                const data = await kiss.ajax.request(...) // [{name: "a"}, {name: "b"}, ...]\n\n                // Do whatever you want to build UI from your data\n                const items = data.map(item => {\n                    return {\n                        type: "button",\n                        text: item.name,\n                        action: () => createNotification(item.name)\n                    }\n                })\n\n                // Inject the result into your component\n                this.setItems(items)\n            }\n        }\n    }).render()\n\n## Default methods\n\nAll components have some default methods you can use:\n\n| Method | Description\n| --- | ---\n| **render()** | **Required** to insert the component into the DOM\n| show() | To show the component\n| showAt() | To show the component at a specific x, y position on the screen\n| hide() | To hide the component\n| toggle() | To toggle the visibility of the component\n| showLoading() | To display a loading spinner inside the component\n| hideLoading() | To hide the loading spinner\n| attachTip() | To attach a tooltip to the component\n| detachTip() | To detach the tooltip from the component\n| setSize() | To set the size of the component\n| setAnimation() | To set the animation of the component\n| moveToViewport() | To move the component back into the viewport, in case it was outside\n| deepDelete() | To remove the component from the DOM and clean all its references in memory\n\n## Referencing components\n\nOnce they are rendered in the DOM, KissJS components can be referenced by their id:\n\n    createPanel({\n        id: "myPanel",\n        title: "My panel",\n        items: [\n            ...\n        ]\n    }).render()\n\n    let myPanel = document.getElementById("myPanel")\n    \n    // Or using an alias for document.getElementById:\n    let myPanel = $("myPanel")\n\nNote: if you don't define an id, KissJS will generate one automatically, but it will be difficult to track the component later.\n`;kiss.doc.cheatsheetViews=`\n## Building application views\n\nKissJS provides a simple way to define views, to structure your application in a modular way.\nExample using a panel:\n\n    // Build the application view in cache\n    kiss.app.defineView({\n        id: "myView",\n        renderer: function(id) {\n            return createPanel({\n                id, // Important: the returned element must have the id of the view\n                title: "My panel",\n                items: [\n                    ...\n                ]\n            })\n        }\n    })\n\n**Important**: The renderer of the view can be **any function** returning an HTMLElement with the view id.\nThis gives a lot of flexibility to build your application views, and you can use KissJS components or any other HTML elements.\n\n## Displaying the views\n\nUsing kiss.views:\n\n    kiss.views.show("myView1")\n    kiss.views.replaceBy("myView2") // Replace the current view by another one\n\nUsing kiss.router:\n\n    kiss.router.init() // Must be called once at the application startup\n    kiss.router.navigateTo("myView1")\n    kiss.router.navigateTo("myView2")\n\nThe main difference is that **kiss.views** is a simple way to manage views, while **kiss.router** provides a complete routing system with history management, and the "back" button of the browser will work as expected.\n\n`;kiss.doc.cheatsheetData=`\nKissJS provides an ORM to manipulate data:\n- It is based on **Models** and **Collections** of **Records**\n- Models define the structure of a Record, while Collections manage lists of Records\n- Models can have relationships with other Models, like one-to-one, one-to-many, or many-to-many\n\n## Models and Collections\n\nAccessing the models and collections of your application:\n\n    kiss.app.models // Hash of all models\n    kiss.app.collections // Hash of all collections\n    \n    // Accessing a specific Model\n    kiss.app.models.spy\n    kiss.app.models.mission\n\n    // Accessing a specific Collection\n    kiss.app.collections.spy\n    kiss.app.collections.mission\n\n    // Accessing the Records of a Collection (only if they are already loaded)\n    kiss.app.collections.spy.records\n    kiss.app.collections.mission.records\n\n## Defining a Model and its Fields\n\n    let spyModel = kiss.app.defineModel({\n        id: "spy",\n        items: [\n            {id: "codeName", type: "text"},\n            {id: "numberOfMissions", type: "number"},\n            {id: "birthDate", type: "date"},\n            {id: "email", type: "text", validationType: "email"}\n        ]\n    })\n\n## CRUD operations on a Record created from a Model\n\n    const record = yourModel.create({name: "John"})\n    await record.save()\n    await record.update({name: "John Doe"})\n    await record.delete()\n\n## Using Collections of Records\n\n    const collection = yourModel.collection\n    \n    // Insert\n    await collection.insertOne({id: "abcdef", name: "Bob"})\n    await collection.insertMany([{name: "Will"}, {name: "Sam"}])\n    \n    // Update\n    await collection.updateOne("abcdef", {name: "Bobby"})\n    await collection.updateMany({country: "USA"}, {country: "United States"})\n    \n    // Delete\n    await collection.deleteOne("abcdef")\n    await collection.deleteMany({country: "United States"})\n        \n    // Getting a single record\n    const record = await collection.findOne("abcdef") // Asynchronous, fetches from server or cache if available\n    const record = collection.getRecord("abcdef") // Synchronous, necessarily uses cache. No result if the collection is not loaded\n\n    // Getting multiple records\n    const records = await collection.find() // All records\n    \n    const records = await collection.find({\n        $and: [\n            {yearOfBirth: 1980},\n            {country: "USA"}\n        ]\n    })\n\n    const records = await collection.findById(["abcdef", "uvw", "xyz"])\n\n## Filtering and sorting data\n\nFor these operations, we can use 2 distinct syntaxes:\n- normalized: default, specific to KissJS\n- mongo: respecting the MongoDB syntax\n    \nHere is a filtering example, using "mongo" syntax:\n\n    collection.filterSyntax = "mongo"\n\n    await collection.filterBy({yearOfBirth: 1980})\n    \n    await collection.filterBy({\n        $and: [\n            {yearOfBirth: 1980},\n            {country: "USA"}\n        ]\n    })\n\n\nHere is a sorting example, using "normalized" syntax:\n\n    collection.sortSyntax = "normalized"\n\n    await collection.sortBy([\n        {firstName: "asc"},\n        {birthDate: "desc"}\n    ])\n    \n## Grouping\n\nKissJS provides a method to group records by one or more fields:\n\n    await collection.groupBy(["country", "city", "age"])\n\nThis is generally used in conjunction with components that support grouping, like datatable, kanban, and timeline.\n\n## Prototyping\n\nKissJS can generate fake records when prototyping applications.\nThis is specially useful when displaying data components like datatable, calendar, kanban, or timeline:\n\n    await collection.insertFakeRecords(100)\n    await collection.deleteFakeRecords()\n\n## Relationships between Models\n\nWe can define relationships between models, thanks to specific field types:\n- **link**: defines a relationship (one-to-one, one-to-many, many-to-many)\n- **lookup**: get the value from a foreign record\n- **summary**: summarize values of multiple foreign records (ex: SUM, AVG, COUNT)\n\nFor example, a spy can have missions:\n\n    /**\n    /* SPY MODEL\n    */\n    const spyModel = kiss.app.defineModel({\n        id: "spy",\n        items: [\n            {id: "codeName", type: "text"},\n            {id: "numberOfMissions", type: "number"},\n            {id: "birthDate", type: "date"},\n            {id: "email", type: "text", validationType: "email"},\n\n            // Defines a link to the mission model\n            {\n                id: "linkToMissions",\n                type: "link",\n                multiple: true, // A Spy can have multiple missions\n                link: {\n                    modelId: "mission", // Foreign model id\n                    fieldId: "linkToSpy" // Foreign link field id\n                }\n            },\n\n            // A field can summarize multiple values from foreign records, using a "summary" field:\n            // COUNT the number of missions\n            {\n                id: "totalMissions",\n                type: "summary",\n                summary: {\n                    linkId: "linkToMissions", // Local link field id\n                    operation: "COUNT"\n                }\n            },\n\n            // AVERAGE the mission scores\n            {\n                id: "averageScore",\n                type: "summary",\n                summary: {\n                    linkId: "linkToMissions", // Local link field id\n                    fieldId: "missionScore", // Foreign field id to summarize\n                    operation: "AVG" // Operation to perform\n                }\n            }\n        ]\n    })\n\n    /**\n    /* MISSION MODEL\n    */\n    const missionModel = kiss.app.defineModel({\n        id: "mission",\n        items: [\n            {id: "missionName", type: "text"},\n            {id: "location", type: "text"},\n            {id: "startDate", type: "date"},\n            {id: "missionScore", type: "number"},\n\n            // Defines a link to the spy model\n            {\n                id: "linkToSpy",\n                type: "link",\n                multiple: false, // A mission belongs to a single spy\n                link: {\n                    modelId: "spy", // Foreign model id\n                    fieldId: "linkToMissions" // Foreign link field id\n                }\n            },\n\n            // A field can retrieve a value from a foreign record, using a "lookup" field:\n            // Get the codeName of the spy linked to this mission\n            {\n                id: "spyCodeName",\n                type: "lookup",\n                lookup: {\n                    linkId: "linkToSpy", // Local link field id\n                    fieldId: "codeName" // Foreign field id to retrieve\n                }\n            }\n        ]\n    })\n\n**REMEMBER**: the relationship must be defined in both models with a symmetrical link field:\n\n    // SPY => MISSIONS                   // MISSION => SPY\n    {                                   {\n        id: "linkToMissions",               id: "linkToSpy",\n        type: "link",                       type: "link",\n        multiple: true,                     multiple: false,\n        link: {                             link: {\n            modelId: "mission",                 modelId: "spy",\n            fieldId: "linkToSpy",               fieldId: "linkToMissions",\n        }                                   }\n    }                                   }\n\n## Computed fields\n\nFields can compute their value from other fields of the same record, using a formula:\n\n    // A user whose "fullname" is the concatenation of "firstName" and "lastName"\n    const userModel = kiss.app.defineModel({\n        id: "employee",\n        items: [\n            {id: "firstName", type: "text"},\n            {id: "lastName", type: "text"},\n            {\n                id: "fullName",\n                type: "text",\n                computed: true,\n                formula: "{{firstName}} + ' ' + {{lastName}}"\n            }\n        ]\n    }\n\n    // An invoice which "totalIncludingVAT" is computed from the VAT\n    const invoiceModel = kiss.app.defineModel({\n        id: "invoice",\n        items: [\n            {id: "totalExcludingVAT", type: "number"},\n            {id: "VAT", type: "number"},\n            {\n                id: "totalIncludingVAT",\n                type: "number",\n                computed: true,\n                formula: "{{totalExcludingVAT}} * (1 + {{VAT}} / 100)"\n            }\n        ]\n    }\n\n## Models can have custom methods, used by their instanciated Records\n\n    const userModel = kiss.app.defineModel({\n        id: "employee",\n        items: [\n            {id: "firstName", type: "text"},\n            {id: "lastName", type: "text"}\n        ],\n        methods: {\n            getFullName() {\n                return this.firstName + " " + this.lastName\n            },\n            getInitials() {\n                return this.firstName[0] + this.lastName[0]\n            }\n        }\n    })\n\n    const userBob = userModel.create({firstName: "Bob", lastName: "Wilson"})\n    const userJohn = userModel.create({firstName: "John", lastName: "Doe"})\n    \n    console.log(userBob.getFullName()) // Bob Wilson\n    console.log(userBob.getInitials()) // BW\n    console.log(userJohn.getFullName()) // John Doe\n`;kiss.doc.cheatsheetACL=`\nKissJS provides a simple and **highly flexible** way to manage permissions and access control lists (ACL). For this, simply add an "acl" attribute to your models, composed of:\n    - **permissions**\n    - **validators**\n\n    const userModel = kiss.app.defineModel({\n        id: "employee",\n        items: [\n            {id: "firstName", type: "text"},\n            {id: "lastName", type: "text"}\n        ],\n        acl: {\n            permissions: {\n                // CRUD operations\n                create: [...],\n                read: [...],\n                update: [...],\n                delete: [...],\n\n                // Non-CRUD operations\n                doThis: [...],\n                doThat: [...],\n                ...\n            },\n            validators: {\n                async validatorFunction1() {},\n                async validatorFunction2() {},\n                async validatorFunction3() {},\n                ...\n            }\n        }\n    })\n\n## Setting permissions\n\nPermissions can be defined for one or more CRUD operation (create, read, update, delete) or **any other non-CRUD action**:\n\n    permissions: {\n        // CRUD operations\n        create: [\n            // Group 1 validators\n            {\n                isOwner: true,\n                quotaNotExceeded: true\n            },\n            // Group 2 validators\n            {\n                isManager: true,\n                quotaNotExceeded: true\n            },\n            // Group 3 validators\n            {\n                isWorkspaceDesigner: true,\n                quotaNotExceeded: true\n            }\n        ],\n        read: [{\n            isManager: true\n        }],\n        update: [{\n            validatorFunction2: false,\n            validatorFunction3: 123\n        }],\n        delete: [{\n            validatorFunction3: 456\n        }],\n\n        // Non-CRUD operations\n        doThis: [{\n            validatorFunction3: "hello",\n            validatorFunction4: "world"\n        }],\n        doThat: [{\n            validatorFunction5: true\n        }]\n    }\n\nThe permission to perform the action is granted if **all the validator functions of a group return their expected value**.\nIf one group of validators fails, the ACL system tries the next group, until a group succeeds.\nIf no group pass the tests, the permission is denied.\n\n**IMPORTANT**: it's not necessary to define all the CRUD operations. If a permission is not defined, it is considered as granted by default.\n\n## Defining validator functions\n\nACL system is isomorphic and works on both the KissJS server and the KissJS client.\n\nValidator functions used for creation and mutations (create, patch, delete) receive an object with 4 properties:\n    - **req**: the server request object (in the NodeJS/Express context)\n    - **userACL**: an array of string containing all the names that identify a user, including groups.\n    - **record**: the record we're trying to access\n    - **model**: the record's model\n\nA validator function used for the "read" action receives an object with 3 properties:\n    - **req**: the server request object\n    - **userACL**\n    - **record**: the record to evaluate.\n\nThe validator returns true if the record matches the requirements.\n\nFor the "read" operation, the validators are evaluated against **each** record to filter data according to the user's permissions.\n\nWhen executed on the CLIENT, the **req** property is not sent (the srever request doesn't exist here).\nValidators must be **asynchronous** because they sometimes need to retrieve database objects.\n\nExample of a validator functions:\n\n    // Only the creator of the record can update it\n    async isAuthor({req, userACL, record, model}) {\n        const userId = kiss.session.getUserId()\n        if (userId == record.createdBy) return true\n        return false\n    }\n\n## Checking the permission to perform an action on a record\n\nOnce the ACL are defined, you can check if a user can perform an **action** on a **record**:\n\n    const record = collection.getRecord("123456")\n    \n    const canUpdate = await kiss.acl.check({\n        action: "update",\n        record\n    })\n    console.log(canUpdate) // true or false\n\n    const canDoThat = await kiss.acl.check({\n        action: "doThat",\n        record\n    })\n    console.log(canDoThat) // true or false    \n\n`;kiss.doc.cheatsheetLocalization=`\nApplications generally needs to be localized in different languages.\nKissJS provides a simple way to manage translations, using kiss.app.defineTexts():\n\n    kiss.app.defineTexts({\n        "general": {\n            "fr": "général",\n            "es": "general"\n        },\n        "#loading": {\n            "en": "loading data... Please wait",\n            "fr": "chargement des données... Merci de patienter",\n            "es": "cargando datos... Por favor espera"\n        },\n        "top": {\n            "fr": "haut",\n            "es": "alto"\n        },\n        ...\n    })\n\nThe English is the pivot language:\n- if an English translation (en) is defined in the object, the value is taken from there (example with "#loading")\n- otherwise, the English value is the object key itself (example with "top")\n\nOnce your texts are defined, you can use them in your UI using the kiss.language.txt() functions:\n\n    kiss.language.txt("top") // "top", or "haut" in French, or "alto" in Spanish\n    kiss.language.txtTitleCase("top") // "Top", or "Haut", or "Alto"\n    kiss.language.txtUpperCase("top") // "TOP", or "HAUT", or "ALTO"\n\n    // You can also use shorter aliases:\n    txt("top")\n    txtTitleCase("top")\n    txtUpperCase("top")\n\nTo define the available languages of your application, use kiss.language.setAvailable():\n\n    kiss.language.setAvailable([\n        {\n            code: "en",\n            name: "English"\n        },\n        {\n            code: "fr",\n            name: "Français"\n        },\n        {\n            code: "es",\n            name: "Español"\n        }\n    ])\n\nTo set the current language of your application, use kiss.language.set():\n\n    kiss.language.set("fr")\n\n`;kiss.doc.cheatsheetMiscTools=`\n| Method or property | Description\n| --- | ---\n| <hr> **ID generators** <hr>\n| kiss.tools.uid() | Generates a unique identifier, like "5f4d3e2c-1b2a-4c3d-8e7f-6a5b4c3d2e1f"\n| kiss.tools.nanoId() | Generates a nano identifier, like "5f4d3e2c1b2a4c3d8e7f6"\n| kiss.tools.shortUid() | Generates a short unique identifier like "5GN0XBF6"\n| <hr> **Testing** <hr>\n| kiss.tools.isMobile() | Checks if the user agent is a mobile device\n| kiss.tools.isUid() | Checks if a string is a valid unique identifier\n| kiss.tools.isNumber() | Checks if a value is a number\n| kiss.tools.isISODate() | Checks if a value is an ISO date (YYYY-MM-DD)\n| kiss.tools.intersects() | Checks if two arrays intersect\n| kiss.tools.isEventInElement() | Check if an event occurred inside an element\n| <hr> **Geolocation** <hr>\n| kiss.tools.getGeolocation() | Gets the current geolocation\n| kiss.tools.distanceInKm() | Calculates the distance between two geolocations\n| kiss.tools.isInRange() | Check if 2 geolocation points are in a given range of kilometers\n| <hr> **Colors** <hr>\n| kiss.tools.getRandomColor() | Generates a random color\n| kiss.tools.adjustColor() | Adjusts the brightness of a color\n| kiss.tools.CSSGradient() | Generates a CSS gradient\n| <hr> **DOM and animations** <hr>\n| kiss.tools.highlight() | Highlight an element buy building an overlay around it and a legend under it\n| kiss.tools.highlightElements() | Highlight a sequence of elements. Useful to create a quick tutorial.\n| kiss.tools.moveToViewport() | Move an element inside the viewport\n| kiss.tools.outlineDOM() | Outline all DOM elements in the page, mainly to debug the layout\n| kiss.tools.animateElement() | Animate an element with a sequence of animations\n| kiss.tools.waitForElement() | (async) Waits for an element to appear in the DOM\n\n`;kiss.doc.cheatsheetPrototypes=`\nKissJS adds some methods to Javascript prototypes:\n\n| String.prototype | Description\n| --- | ---\n| <hr>\n| leftString | Return the left part of a string\n| rightString | Return the right part of a string\n| toTitleCase | Capitalize the first letter of each word\n| removeExtraSpaces | Reduce every extra spaces to a single space character\n| isNumeric | Check if the string can be converted to a number\n| hashCode | Return a hash code of the string\n\nExamples:\n\n    let str = "Hello, World!"\n    str.leftString(",") // "Hello"\n    str.rightString(",") // " World!"\n\n| Number.prototype | Description\n| --- | ---\n| <hr>\n| round | Round a number to a given number of decimals\n| toFileSize | Convert a number of bytes to a human-readable file size\n| format | Formats a number as a string with a fixed number of digits\n| pad | Formats a number as a string with a fixed number of characters, leading zeros\n\nExamples:\n\n    let num = 1234\n    num.toFileSize() // "1.21 KB"\n    num.format(2) // "123.00"\n    num.pad(6) // "001234"\n\n| Date.prototype | Description\n| --- | ---\n| <hr>\n| toISO | Convert a date to an ISO string like "2020-12-31"\n| toISODateTime | Convert a date to an ISO string like "2020-12-31 23:59:59"\n| addDays | Add days to a date\n| toTime | Get the time part of a date, like hh:mm\n\nExamples:\n\n    let date = new Date()\n    date.toISO() // "2020-12-31"\n    date.toISODateTime() // "2020-12-31 23:59:59"\n    date.toTime() // "23:59"\n\n| Array.prototype | Description\n| --- | ---\n| <hr>\n| swap | Swap two elements in an array\n| unique | Remove all duplicates from an array\n| remove | Remove the first given element\n| intersect | Returns the intersection of two arrays\n| sortAlpha | Return the array sorted alphabetically\n\nExamples:\n\n    let arr = ["a", "b", "c", "c", "c", "d"]\n    arr.swap(0, 3) // ["c", "b", "c", "a", "c", "d"]\n    arr.unique() // ["a", "b", "c", "d"]\n    arr.remove("b") // ["a", "c", "c", "c", "d"]\n    arr.intersect(["a", "c", "e"]) // ["a", "c"]\n\n| Array.prototype | Description\n| --- | ---\n| <hr>\n| uniqueObjectId | Remove all the objects with a duplicate id\n| uniqueObject | Remove all the objects with a duplicate property\n| get | Return the object with the resquested id\n| removeById | Remove the object with the requested id\n| sortBy | Return the array sorted by property name\n| includesObject | Check if an array of objects contains a specific object\n\nExamples:\n\n    let arr = [{id: 1, name: "Alice"}, {id: 2, name: "Bob"}, {id: 1, name: "Bob"}]\n    arr.uniqueObjectId() // [{id: 1, name: "Alice"}, {id: 2, name: "Bob"}]\n    arr.uniqueObject("name") // [{id: 1, name: "Alice"}, {id: 2, name: "Bob"}]\n    arr.get(2) // {id: 2, name: "Bob"}\n    arr.removeById(2) // [{id: 1, name: "Alice"}, {id: 1, name: "Bob"}]\n\n`;kiss.app.defineView({id:"cheatsheet-menu",renderer:function(id,target){return createBlock({id:id,target:target,defaultConfig:{height:40,textAlign:"left",iconSize:"18px",iconColor:"#8aa2c8",borderColor:"#e3e5ec",borderWidth:"1px 0px 0px 0px",borderRadius:"0px",backgroundColor:"#f3f5f7",colorHover:"#00aaee",iconColorHover:"#00aaee",backgroundColorHover:"#e5e9ec"},layout:"vertical",items:[{type:"html",html:"Cheat sheet",class:"navigation-title"},{type:"button",text:"General",icon:"fas fa-info",action:()=>kiss.router.navigateTo({anchor:"General"})},{type:"button",text:"Building UI",icon:"far fa-object-group",action:()=>kiss.router.navigateTo({anchor:"Building UI"})},{type:"button",text:"Building application views",icon:"far fa-window-restore",action:()=>kiss.router.navigateTo({anchor:"Building application views"})},{type:"button",text:"Data & ORM",icon:"fas fa-database",action:()=>kiss.router.navigateTo({anchor:"Manipulating data"})},{type:"button",text:"ACL & Permissions",icon:"fas fa-key",action:()=>kiss.router.navigateTo({anchor:"ACL and Permissions"})},{type:"button",text:"Localization",icon:"fas fa-globe",action:()=>kiss.router.navigateTo({anchor:"Localization"})},{type:"button",text:"Tools",icon:"fas fa-wrench",action:()=>kiss.router.navigateTo({anchor:"Miscellaneous tools"})},{type:"button",text:"Prototypes",icon:"fab fa-js-square",action:()=>kiss.router.navigateTo({anchor:"Javascript prototypes"})},{type:"button",text:"Back to Home",icon:"fas fa-arrow-left",fontWeight:"bold",action:()=>kiss.router.navigateTo({section:"home",anchor:"What is KissJS?"})}]})}});kiss.app.defineView({id:"buy",renderer:function(id,target){return createPanel({id:id,target:target,modal:true,closable:true,draggable:true,align:"center",top:200,width:"50%",height:()=>kiss.screen.getHeightMinus(400),title:"Why should you buy this?",animation:"zoomIn",items:[{type:"html",html:`<pre class="showcase-description">Seriously.\n\nWhy should you buy a javascript library when you can find *tons* of free libraries like React, Vue, or Angular. Why should you buy something that has *no* community at all?\nWell, there are few reasons for that.\n\nMainstream frameworks are simple to do simple stuff, but get highly complicated when you want to build bigger stuff. In short, you'll probably do your first app in minutes, but then you'll need 2-3 months to really master the framework.\nThat's also why a lot of people mastering a framework can't afford to invest time in mastering another one: it's just too long, with too many concepts to grab.\n\nKissJS is the simplest library you'll find to build fast and complex UI. It has no dependencies at all, not event JQuery. It's very easy to customize your components, or to build new ones. It also has a great datatable, which works perfectly smoothly with tens of thousands of records loaded.\n\nI've spent a year fulltime to build this library so that people can save a *lot* of time to build web applications without (too much) headakes.\nIf you decide to buy KissJS for you or your company, you also help the library to get better and better.\n\nClick on the Paypal button and I'll send you a zip.\nContact me if you have questions: david@pickaform.com\n</pre>\n`},{type:"html",html:`\n                <center><form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">\n                    <input type="hidden" name="cmd" value="_s-xclick">\n                    <input type="hidden" name="hosted_button_id" value="W3JTUL4QAJ2T6">\n                    <table>\n                    <tr><td><input type="hidden" name="on0" value="KissJS bundles"></td></tr>\n                    <tr><td><select class="buy-options" name="os0">\n                        <option value="KissJS - 1 seat">KissJS - 1 seat $59,00 USD</option>\n                        <option value="KissJS - 2 seats">KissJS - 2 seats $99,00 USD</option>\n                        <option value="KissJS - 3 seats">KissJS - 3 seats $149,00 USD</option>\n                        <option value="KissJS - 5 seats">KissJS - 5 seats $249,00 USD</option>\n                        <option value="KissJS - 10 seats">KissJS - 10 seats $499,00 USD</option>\n                        <option value="KissJS - 20 seats">KissJS - 20 seats $999,00 USD</option>\n                    </select></td></tr>\n                    </table>\n                    <input type="hidden" name="currency_code" value="USD">\n                    <input type="image" src="https://www.paypalobjects.com/fr_FR/FR/i/btn/btn_buynowCC_LG.gif" border="0" name="submit" alt="PayPal, le réflexe sécurité pour payer en ligne">\n                    <img alt="" border="0" src="https://www.paypalobjects.com/fr_FR/i/scr/pixel.gif" width="1" height="1">\n                </form></center>\n            `}]})}});kiss.app.defineView({id:"logo",renderer:function(id,target){return createHtml({id:id,target:target,height:120,html:`<img src="./resources/img/KissJS logo.png" alt="KissJS logo" width=300 height=120>`,style:"cursor: pointer",events:{click:()=>{kiss.router.navigateTo({ui:"landing-page"})},mouseenter:function(){this.setAnimation("pulse")}}})}});function createFakeModel(component){localStorage.setItem("config-layout-attachment","thumbnails-large");let fakeAttachmentField='[{"id":"01887414-3775-7443-81bc-260a9539d7e4","filename":"cyberpunk-cantina-Women-Cyberpunk-ZEN6auDj.png","path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-ZEN6auDj.png","size":1279664,"type":"amazon_s3","mimeType":"image/png","thumbnails":{"s":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-ZEN6auDj.64x64.png","size":6106},"m":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-ZEN6auDj.256x256.png","size":87845},"l":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-ZEN6auDj.512x512.png","size":332583}},"accessReaders":["*"],"createdAt":"2023-05-31T23:10:59.240Z","createdBy":"david.grossi@pickaform.com"},{"id":"01887414-379e-701e-b4dc-15301d8b4560","filename":"cyberpunk-cantina-Women-Cyberpunk-RUyLqAZl.png","path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-RUyLqAZl.png","size":1360256,"type":"amazon_s3","mimeType":"image/png","thumbnails":{"s":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-RUyLqAZl.64x64.png","size":6080},"m":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-RUyLqAZl.256x256.png","size":89129},"l":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-RUyLqAZl.512x512.png","size":337313}},"accessReaders":["*"],"createdAt":"2023-05-31T23:10:59.240Z","createdBy":"david.grossi@pickaform.com"},{"id":"01887414-378a-759d-b17d-762b4dd33b72","filename":"cyberpunk-cantina-Women-Cyberpunk-vfNB7pxJ.png","path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-vfNB7pxJ.png","size":1301698,"type":"amazon_s3","mimeType":"image/png","thumbnails":{"s":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-vfNB7pxJ.64x64.png","size":6193},"m":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-vfNB7pxJ.256x256.png","size":89664},"l":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-vfNB7pxJ.512x512.png","size":331588}},"accessReaders":["*"],"createdAt":"2023-05-31T23:10:59.240Z","createdBy":"david.grossi@pickaform.com"},{"id":"01887414-506f-7707-a529-20a36858b1a8","filename":"cyberpunk-cantina-Women-Cyberpunk-FjFuk2YX.png","path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-FjFuk2YX.png","size":1357025,"type":"amazon_s3","mimeType":"image/png","thumbnails":{"s":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-FjFuk2YX.64x64.png","size":6136},"m":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-FjFuk2YX.256x256.png","size":89761},"l":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-FjFuk2YX.512x512.png","size":339784}},"accessReaders":["*"],"createdAt":"2023-05-31T23:10:59.240Z","createdBy":"david.grossi@pickaform.com"}]';fakeAttachmentField=JSON.parse(fakeAttachmentField);let releaseDateField={id:"releaseDate",label:"Release date",type:"date",year:(new Date).getFullYear()};if(component=="timeline"){releaseDateField.month=(new Date).getMonth()+1}return{name:"Computer game",namePlural:"Computer games",icon:"fas fa-rocket",items:[{type:"panel",title:"General informations",icon:"fas fa-info-circle",collapsible:true,defaultConfig:{labelPosition:"left",width:"100%",fieldWidth:"70%",labelWidth:"30%"},items:[{primary:true,id:"gameName",label:"Video game name",type:"text",value:"Cyberpunk"},releaseDateField,{id:"reviewed",label:"Reviewed",type:"checkbox",checked:true},{id:"reviewDate",label:"Review date",type:"date"},{id:"category",label:"Category",type:"select",multiple:true,value:"RPG",options:[{value:"Adventure",color:"#00aaee"},{value:"Action",color:"#00eeaa"},{value:"Strategy",color:"#88cc00"},{value:"TPS",color:"#aa00ee"},{value:"FPS",color:"#eeaa00"},{value:"RPG",color:"#ee00aa"},{value:"RTS",color:"#00aaee"},{value:"Simulation",color:"#2bc48c"}]},{id:"platform",label:"Platform",type:"select",value:"PS4",options:[{value:"PS5",color:"#0075ff"},{value:"PS4",color:"#00aaee"},{value:"PS3",color:"#00eeaa"},{value:"Xbox",color:"#aaee00"},{value:"Switch",color:"#aa00ee"},{value:"Xbox one",color:"#eeaa00"},{value:"PC",color:"#000000"},{value:"IOS",color:"#999999"}]},{id:"description",label:"Description (rich text)",type:"richTextField",rows:10},{id:"attachment",label:"Game screenshots",type:"attachment",value:fakeAttachmentField,tip:{text:"Sorry, attachment field is not enabled in demo mode",maxWidth:500}}]},{type:"panel",title:"Details",icon:"fas fa-star",collapsible:true,defaultConfig:{labelPosition:"left",width:"100%",fieldWidth:"70%",labelWidth:"30%"},items:[{id:"duration",label:"Duration",type:"number",min:1,max:100,unit:"hour",precision:0,tip:"Duration must be between 1 and 100"},{id:"ratingMetacritic",label:"Metacritic",type:"rating",shape:"star",max:5},{id:"ratingIGN",label:"IGN",type:"rating",shape:"thumb",max:8,iconColorOn:"#00aaee"},{id:"ratingGameSpot",label:"GameSpot",type:"rating",shape:"heart",max:3,iconColorOn:"var(--red)"},{id:"percentFinished",label:"Game finished",type:"slider",unit:"%",value:50},{id:"color",label:"Color code",type:"color",value:"#00aaee"},{id:"icon",label:"Icon code",type:"icon",value:"fab fa-apple"}]}]}}function showCase(title,description,...examples){let exampleBlock=examples.map((itemConfig=>showCaseExample(itemConfig)));return createBlock({layout:"horizontal",padding:"16px 0px 16px 0px",items:[{type:"html",html:"",class:"showcase-margin"},{width:"100%",items:[{id:title,type:"html",html:`<div class="showcase-title">${title}</div>`},{type:"html",html:`<div class="showcase-description"><pre>${marked(description)}</pre></div>`},...exampleBlock]}]})}function showCaseExample(itemConfig){if(itemConfig.demo==true){return createBlock({id:"showcase-"+kiss.tools.shortUid(),items:[{type:"html",class:"showcase-description",html:`<iframe style="border: none" width=100% height=${itemConfig.height||500} src="${itemConfig.url}">`}]})}const isMobile=kiss.tools.isMobile();return createBlock({id:"showcase-"+itemConfig.id,layout:isMobile?"vertical":"horizontal",flexWrap:"wrap",items:[{flex:1,class:"showcase-example",items:[itemConfig]},{type:"html",flex:1,class:"code-sample",html:toHTML(itemConfig)}]})}function toHTML(config){let jsonConfig=kiss.tools.snapshot(config);for(prop of["id","target","events"])delete jsonConfig[prop];let objectAsHtml=JSON.stringify(jsonConfig,undefined,4).replace(/"(\w+)"\s*:/g,"$1:");return"<pre>"+hljs.highlight("javascript",objectAsHtml).value+"</pre>"}kiss.app.defineView({id:"topbar",renderer:function(id,target){return createBlock({id:id,target:target,layout:"horizontal",height:50,items:[{id:"side-menu",hidden:true,type:"button",icon:"fas fa-bars",iconColor:"#7799bb",iconColorHover:"#00aaee",iconSize:"24px",backgroundColor:"transparent",borderWidth:"0px",margin:"6px",action:()=>$("site-west").setAnimation("slideInLeft").toggle()},{type:"spacer",flex:1},{type:"html",html:`<a href="https://pickaform.fr/en"><img src="./resources/img/pickaform.png"</a>`},{hidden:true,type:"button",text:"Download",borderRadius:"32px",icon:"fas fa-coffee",iconSize:"18px",margin:"10px",padding:"10px",action:()=>kiss.views.show("buy")}]})}});kiss.app.defineView({id:"components-content",renderer:function(id,target){return createBlock({id:id,target:target,styles:{this:"user-select: none;"},items:[{background:"#ffffff",defaultConfig:{labelWidth:200,labelPosition:"left"},items:[showCase("Introduction about KissJS components",kiss.doc.components),showCase("Text field",kiss.doc.textField,{id:"field-text",type:"text",label:"This is a simple text field"},{id:"field-text-dimensions",type:"text",label:"This is a text field with a placeholder and a maximum length",placeholder:"Enter something up to 10 characters",labelPosition:"top",labelWidth:300,maxLength:10,fieldWidth:300}),showCase("Textarea field",kiss.doc.textareaField,{id:"field-textarea",type:"textarea",label:"Textarea field",labelPosition:"top",value:"I'm a multiline text.\nAnd here is the proof.",rows:5,width:"100%"}),showCase("Number field",kiss.doc.numberField,{id:"field-number",type:"number",label:"Number field",fieldWidth:150,events:{change:function(){createNotification({message:this.getValue()})}}},{id:"field-number-range",type:"number",label:"With min and max",fieldWidth:150,value:12.34,min:0,max:100}),showCase("Date field",kiss.doc.dateField,{id:"field-date",type:"date",label:"Birth date",value:(new Date).toISO(),events:{change:function(){createNotification({message:this.getValue()})}}}),showCase("Checkbox field",kiss.doc.checkbox,{id:"field-checkbox",type:"checkbox",label:"This is a standard checkbox"},{id:"field-checkbox-switch",type:"checkbox",label:"This is a checkbox which looks like a switch",shape:"switch",iconColorOff:"#888888",iconColorOn:"#00aaee"},{id:"field-checkbox-star",type:"checkbox",label:"This is a checkbox which looks like a star",shape:"star",iconColorOff:"#888888",iconColorOn:"#cc3300",checked:true},{id:"field-checkbox-custom",type:"checkbox",label:"This is a totally custom checkbox!",labelPosition:"top",tip:"Open the lock, please",fontSize:"16px",iconSize:"32px",iconOff:"fas fa-lock",iconOn:"fas fa-lock-open",iconColorOff:"#888888",iconColorOn:"#00aaee"},{borderStyle:"dashed",borderColor:"#dfdfdf",borderRadius:"10px",padding:"20px",items:[{type:"html",html:"What programming languages are you familiar with?",margin:"0 0 10px 0"},{type:"checkbox",label:"Javascript",labelPosition:"right"},{type:"checkbox",label:"C++",labelPosition:"right"},{type:"checkbox",label:"LUA",labelPosition:"right"}]}),showCase("Select field",kiss.doc.selectField,{id:"field-select",type:"select",label:"Simple select with auto-complete (by default)",fieldWidth:"300px",labelPosition:"top",options:[{value:"Bob Wilson"},{value:"John Smith"}]},{id:"field-select-multiple",type:"select",label:"Multiple select with colors and other options",fieldWidth:"300px",labelPosition:"top",multiple:true,allowClickToDelete:true,allowSwitchOnOff:true,allowDuplicates:false,options:[{value:"Bob Wilson",color:"#00aaee"},{value:"John Smith",color:"#88cc33"},{value:"Julia Angelina",color:"#3bc48c"},{value:"Johanna Sandra",color:"#8aa2c8"},{value:"disabled option!",color:"#000000",disabled:true}]}),showCase("Slider field",kiss.doc.sliderField,{id:"field-slider",type:"slider",label:"Slide me!",value:50,events:{change:function(){createNotification({message:"The new value is "+this.getValue()})}}}),showCase("Rating field",kiss.doc.ratingField,{id:"field-rating-1",type:"rating",label:"Rate me!",value:3,events:{change:function(){createNotification({message:"The new rate is "+this.getValue()})}}},{id:"field-rating-2",type:"rating",label:"Rate me!",value:3,max:10,shape:"heart",iconColorOn:"#ff0000",events:{change:function(){createNotification({message:"The new rate is "+this.getValue()})}}}),showCase("Color picker",kiss.doc.colorPicker,{id:"color_picker",type:"colorPicker",value:"#0088CC",columns:20,selectorSize:"20px",action:color=>createDialog({type:"message",title:"Your selection",headerBackgroundColor:color,message:"You've selected the color <b>"+color,buttonOKText:"Ok, thanks!",icon:"fas fa-exclamation-triangle"})},{id:"color_picker_custom",type:"colorPicker",icon:"fas fa-paint-brush",iconSize:"16px",columns:10,selectorSize:"40px",selectorBorderRadius:"20px",value:"#008833",palette:["00CCEE","00AAEE","0088CC","0055CC","004499","007766","008833","00AA99","55CC00","88CC00"],action:color=>createDialog({type:"message",title:"Your selection",headerBackgroundColor:color,message:"You've selected the color <b>"+color,buttonOKText:"Ok, thanks!",icon:"fas fa-exclamation-triangle"})}),showCase("Icon picker",kiss.doc.iconPicker,{id:"icon_picker",type:"iconPicker",height:300,action:icon=>createDialog({type:"message",title:"Your selection",message:"You've selected the icon <b>"+icon,buttonOKText:"Ok, thanks!",icon:"fas fa-exclamation-triangle"})},{id:"icon_picker_small",type:"iconPicker",columns:10,height:200,value:"fas fa-burn",color:"#ffffff",iconSize:"18px",selectorSize:"40px",selectorBorderRadius:"20px",backgroundColor:"#00aaee",backgroundColorSelected:"#a1ed00",action:icon=>createDialog({type:"message",title:"Your selection",message:"You've selected the icon <b>"+icon,buttonOKText:"Ok, thanks!",icon:"fas fa-exclamation-triangle"})}),showCase("Buttons",kiss.doc.button,{id:"button-1",type:"button",text:"I have some blue text",color:"#00aaee"},{id:"button-2",type:"button",text:"I have an icon and rounded borders",icon:"fas fa-check",borderRadius:"24px"},{id:"button-3",type:"button",text:"Icon at the top",icon:"fas fa-pause",iconPosition:"top"},{id:"button-4",type:"button",iconSize:"32px",width:"60px",height:"60px",icon:"fas fa-rocket",tip:"Launch the rocket!",borderRadius:"0px 32px 0px 32px",color:"#00aaee",iconColor:"#00aaee",iconColorHover:"#ffffff",backgroundColorHover:"#00aaee",boxShadow:"5px 5px 10px #bbbbbb",boxShadowHover:"0px 0px"}),showCase("Html",kiss.doc.html),showCase("Field validation rules",kiss.doc.validationRules,{id:"field-text-email",type:"text",label:"Email field",fieldWidth:"300px",labelPosition:"top",placeholder:"Please enter your email",validationType:"email"}),showCase("Sizing and positionning",kiss.doc.componentSizeAndPosition,{id:"field-size",type:"text",label:"Custom field size",labelWidth:150,fieldWidth:200})]}]})}});kiss.doc.components=`KissJS components are the small pieces of UI elements that we need to build a web application, like text fields, checkboxes, buttons...\n\nThey can be created directly by a function, or indirectly by their container (like blocks or panels).\nTo create a new component directly with a function, use one of the following functions:\n\nComponent type | Function to create the component | Class | API\n-|-|-|-\n**CONTAINERS**|\nBlock | createBlock | kiss.ui.Block | [(link)](./doc/out/kiss.ui.Block.html)\nPanel | createPanel | kiss.ui.Panel | [(link)](./doc/out/kiss.ui.Panel.html)\nWizardPanel | createWizardPanel | kiss.ui.WizardPanel | [(link)](./doc/out/kiss.ui.WizardPanel.html)\n**FIEDS**|\nText | createTextField | kiss.ui.Field | [(link)](./doc/out/kiss.ui.Field.html)\nTextarea | createTextareaField | kiss.ui.Field | [(link)](./doc/out/kiss.ui.Field.html)\nNumber | createTextField | kiss.ui.Field | [(link)](./doc/out/kiss.ui.Field.html)\nDate | createDateField | kiss.ui.Field | [(link)](./doc/out/kiss.ui.Field.html)\nCheckbox | createCheckboxFeld | kiss.ui.Checkbox | [(link)](./doc/out/kiss.ui.Checkbox.html)\nSelect | createSelectFeld | kiss.ui.Select | [(link)](./doc/out/kiss.ui.Select.html)\nSlider | createSlider | kiss.ui.Slider | [(link)](./doc/out/kiss.ui.Slider.html)\nRating | createRating | kiss.ui.Rating | [(link)](./doc/out/kiss.ui.Rating.html)\nColor | createColorField | kiss.ui.Color | [(link)](./doc/out/kiss.ui.Color.html)\nColor picker | createColorPicker | kiss.ui.ColorPicker | [(link)](./doc/out/kiss.ui.ColorPicker.html)\nIcon | createIconField | kiss.ui.Icon | [(link)](./doc/out/kiss.ui.Icon.html)\nIcon picker | createIconPicker | kiss.ui.IconPicker | [(link)](./doc/out/kiss.ui.IconPicker.html)\nAttachment | createAttachment | kiss.ui.Attachment | [(link)](./doc/out/kiss.ui.Attachment.html)\n**ELEMENTS**|\nHtml | createHtml | kiss.ui.Html | [(link)](./doc/out/kiss.ui.Html.html)\nButton | createButton | kiss.ui.Button | [(link)](./doc/out/kiss.ui.Button.html)\nImage | createImage | kiss.ui.Image | [(link)](./doc/out/kiss.ui.Image.html)\nMenu | createMenu | kiss.ui.Menu | [(link)](./doc/out/kiss.ui.Menu.html)\nDialog | createDialog | kiss.ui.Dialog | [(link)](./doc/out/kiss.ui.Dialog.html)\nNotification | createNotification | kiss.ui.Notification | [(link)](./doc/out/kiss.ui.Notification.html)\nTip | createTip | kiss.ui.Tip | [(link)](./doc/out/kiss.ui.Tip.html)\n**DATA COMPONENTS**|\nDatatable | createDatatable | kiss.ui.Datatable | [(link)](./doc/out/kiss.ui.Datatable.html)\nCalendar | createCalendar | kiss.ui.Calendar | [(link)](./doc/out/kiss.ui.Calendar.html)\nKanban | createKanban | kiss.ui.Kanban | [(link)](./doc/out/kiss.ui.Kanban.html)\nTimeline | createTimeline | kiss.ui.Timeline | [(link)](./doc/out/kiss.ui.Timeline.html)\nGallery | createGallery | kiss.ui.Gallery | [(link)](./doc/out/kiss.ui.Gallery.html)\nChartView | createChartView | kiss.ui.ChartView | [(link)](./doc/out/kiss.ui.ChartView.html)\nDashboard | createDashboard | kiss.ui.Dashboard | [(link)](./doc/out/kiss.ui.Dashboard.html)\n\n**EXTENSIONS**|\nrichTextField | createRichTextField | kiss.ux.RichTextField | [(link)](./doc/out/kiss.ux.RichTextField.html)\naiTextarea | createAiTextareaField | kiss.ux.AiTextarea | [(link)](./doc/out/kiss.ux.AiTextarea.html)\naiImage | createAiImageField | kiss.ux.AiImage | [(link)](./doc/out/kiss.ux.AiImage.html)\ncodeEditor | createCodeEditor | kiss.ux.CodeEditor | [(link)](./doc/out/kiss.ux.CodeEditor.html)\nqrCode | createQRCode | kiss.ux.QrCode | [(link)](./doc/out/kiss.ux.QrCode.html)\nmap | createMap | kiss.ux.Map | [(link)](./doc/out/kiss.ux.Map.html)\nmap field | createMapField | kiss.ux.MapField | [(link)](./doc/out/kiss.ux.MapField.html)\nchart | createChart | kiss.ux.Chart | [(link)](./doc/out/kiss.ux.Chart.html)\n\n\nLike this:\n\n\n    let myTextField = createTextField({\n        label: "My text field"\n    })\n\n\nWhen we do that, the component's HTML markup has been generated, but it's not yet attached to the DOM, which means it's not visible.\nTo render the component and make it visible, call its **render()** method, like this:\n\n    myTextField.render()\n\n\nCreation functions are chainable.\nIt means that you can create the component **and** render it directly, like this:\n\n    let myTextField = createTextField({\n        label: "My text field"\n    }).render()\n\nComponents can be **containers** too.\nTo know more about containers, <a href="javascript:kiss.router.navigateTo({ui: 'start', section: 'containers', anchor: 'Introduction%20about%20containers'})">click here</a>.\n\nTo create a component within a **container** component (block or panel), just integrate its JSON configuration within the **items** property of the container.\nIn this case, you will also have to specify the component's **type** property, so that KissJS knows what kind of component you want.\nLike this:\n\n\n    // Create a container with 2 fields and a button:\n    let myForm = createBlock({\n        items: [\n            // Creates a text field\n            {\n                type: "text",\n                label: "My text field"\n            },\n            // Creates a date field\n            {\n                type: "date",\n                label: "My date field"\n            },\n            // Creates a button\n            {\n                type: "button",\n                text: "Click me",\n                action: () => console.log("Click!")\n            }\n        ]\n    })\n\nThe nested components will be rendered at the same time as their container:\n\n    myForm.render()\n\n\nImportant: if no **type** has been specified for a container's item, it defaults to a **Block** container:\n\n    let myPanel = createPanel({\n        title: "I'm a panel",\n        items: [\n            {\n                type: "html",\n                html: "<a href="www.pickaform.com"></a>"\n            },\n            // No type is specified, so, it defaults to a **block** element which can contain other items\n            {\n                padding: 20,                    \n                boxShadow: "5px 5px 10px #cccccc",\n                items: [\n                    // ... Some nested items      \n                ]\n            }\n        ]\n    })`;kiss.doc.textField=`KissJS generates automatically a label and an input field:\n\n    createTextField(jsonConfig)\n\nOr if you include it in a container (Block or Panel):\n\n    createBlock({\n        items: [\n            {\n                type: "text",\n                label: "First name"\n                // ...other options\n            },\n            {\n                type: "text",\n                label: "Last name"\n                // ...other options\n            }\n        ]\n    })\n\n`;kiss.doc.textareaField=`A textarea is a multiline text.\n\n    createTextareaField(jsonConfig)\n\nOr if you include it in a container:\n\n    createBlock({\n        items: [\n            {\n                type: "textarea",\n                label: "Description"\n                // ...other options\n            }\n        ]\n    })`;kiss.doc.numberField=`Same principle for number fields:\n\n    createNumberField(jsonConfig)\n\nOr if you include it in a container:\n\n    createBlock({\n        items: [\n            {\n                type: "number",\n                label: "Amount"\n                // ...other options\n            }\n        ]\n    })\n`;kiss.doc.dateField=`Date fields are created with:\n\n    createDateField(jsonConfig)\n\nOr if you include it in a container:\n\n    createBlock({\n        items: [\n            {\n                type: "date",\n                label: "Birth date"\n                // ...other options\n            }\n        ]\n    })\n    \nDate fields work with ISO strings internaly (2020-12-24T18:50:30.123Z).\nKissJS extends the Date prototype with a method toISO() which extracts the date part only:\n\n    new Date().toISO() // returns 2021-03-04\n`;kiss.doc.checkbox=`To create a checkbox field, write this:\n\n    createCheckbox(jsonConfig)\n\nOr if you include it in a container:\n\n    createBlock({\n        items: [\n            {\n                type: "checkbox",\n                label: "Check me"\n                // ...other options\n            }\n        ]\n    })\n\nThe checkbox can have different shapes, using the <b>shape</b> property:\n- "check"\n- "square"\n- "circle"\n- "switch"\n- "star"`;kiss.doc.selectField=`Select fields are very powerful fields that have a bunch of cool options:\n- single or multiple values\n- auto-complete\n- possible to disable some options\n- possible to update the list of options afterward\n- keyboard navigation up and down within options\n- selection with mouse or Enter\n- can delete existing entries with Backspace\n- option to add values which are not in list\n- option to prevent duplicates\n- option to add entries using a separator, comma by default (useful for email-like inputs)\n- possibility to have a custom renderer for options\n- possibility to have a custom renderer for values\n- option to delete values by clicking on them\n- option to switch a value on/off by clicking on it in the dropdown list\n- possible to use labels, to display something different than the field values\n\nTo create a Select field, use the syntax:\n\n    createSelect(jsonConfig)\n\nOr if you include it in a container:\n\n    createBlock({\n        items: [\n            {\n                type: "select",\n                label: "Job"\n                // ...other options\n            }\n        ]\n    })    \n`;kiss.doc.sliderField=`A slider field can be created with:\n\n    createSliderField(jsonConfig)\n\nOr if you include it in a container:\n\n    createBlock({\n        items: [\n            {\n                type: "slider",\n                label: "Slide me",\n                // ...other options\n            }\n        ]\n    })\n\n`;kiss.doc.ratingField=`A rating field can be created with:\n\n    createRatingField(jsonConfig)\n\nOr if you include it in a container:\n\n    createBlock({\n        items: [\n            {\n                type: "rating",\n                label: "Rate me",\n                // ...other options\n            }\n        ]\n    })\n\n`;kiss.doc.colorPicker=`A color picker is a component to pick a color. To create a color picker, you write:\n\n    createColorPicker(jsonConfig)\n\nOr if you include it in a container:\n\n    createBlock({\n        items: [\n            {\n                type: "colorPicker",\n                // ...other options\n            }\n        ]\n    })\n\nIt's possible to define a default value, and also custom colors for the palette, like this:\n\n    let myColorPicker = createColorPicker({\n        value: "#00CCEE",\n        palette: ["00CCEE", "00AAEE", "0088CC", "0055CC", "004499"]\n    })\n\n*Note that colors in the custom palette must be hexa colors without the # sign (because it was boring to repeat # so many times)*\n\nTo capture the selected color, add an **action** property callback. Like this:\n\n    let myColorPicker = createColorPicker({\n        action: (color) => {\n            console.log("The selected color is " + color) // #00aaee\n        }\n    })\n`;kiss.doc.iconPicker=`The icon picker is a component to pick an icon from the [Font Awesome](https://fontawesome.com/) library.\nCreate one with this syntax:\n\n    createIconPicker(jsonConfig)\n\nOr if you include it in a container:\n\n    createBlock({\n        items: [\n            {\n                type: "iconPicker",\n                // ...other options\n            }\n        ]\n    })\n\nTo capture the selected icon, add an **action** property callback. Like this:\n\n    let myIconPicker = createIconPicker({\n        action: (iconClass) => {\n            console.log("The selected icon class is " + iconClass) // "fas fa-check"\n        }\n    })\n`;kiss.doc.button=`A button can be created with:\n\n    createButton(jsonConfig)\n\nOr if you include it in a container:\n\n    createBlock({\n        items: [\n            {\n                type: "button",\n                text: "click me!",\n                action: function() {\n                    alert("click!")\n                }\n            }\n        ]\n    })\n\n`;kiss.doc.html=`In some situations, it's useful to be able to embed HTML into your components.\nYou can create an Html component like this:\n\n    let myHtmlComponent = createHtml({\n        html: "<div>Hello world</div>"\n    })\n\n    myHtmlComponent.render()\n\nYou can also insert some HTML into a container element, like this:\n\n    createPanel({\n        items: [\n            // Here is your html component\n            {\n                type: "html",\n                html: "Please, enter your <u>first name</u> <b>below</b>..."\n            },\n            // ... and a text field\n            {\n                type: "text",\n                label: "First name"\n            }\n        ]\n    })\n`;kiss.doc.componentSizeAndPosition=`You can use any CSS valid syntax (px, vw, ...) to define your width, height, top, left, and right parameters.\nIf you just use numbers, it will be converted to pixel unit:\n\n    createPanel({\n        id: "my-panel",\n        width: 500, // => converted to "500px"\n        items: [\n            // ...\n        ]\n    })\n\nIf you use a function instead of a static value, the size will be recalculated each time there is a window resize event.\nFor example:\n\n    createPanel({\n        id: "my-panel",\n        modal: true,\n        top: () => (kiss.screen.current.height - 200) / 2,\n        width: () => (kiss.screen.current.width - 200) / 2,\n        items: [\n            // ...\n        ]\n    })\n`;kiss.doc.validationRules=`\nUsing the **validationType** property, you can use pre-defined validation types like:\n- "alpha"\n- "alphanumeric"\n- "email"\n- "url"\n- "ip"\n\nIf you need specific validation rules, use a regular expression within the **validation** property.\n\nFor example:\n\n    {\n        type: "text",\n        label: "Hexadecimal field",\n        validation: /^[0-9a-fA-F]+$/\n    }\n`;kiss.app.defineView({id:"components-menu",renderer:function(id,target){return createBlock({id:id,target:target,defaultConfig:{height:40,textAlign:"left",iconSize:"18px",iconColor:"#8aa2c8",borderColor:"#e3e5ec",borderWidth:"1px 0px 0px 0px",borderRadius:"0px",backgroundColor:"#f3f5f7",colorHover:"#00aaee",iconColorHover:"#00aaee",backgroundColorHover:"#e5e9ec"},layout:"vertical",items:[{type:"view",id:"logo"},{type:"html",html:"Components",class:"navigation-title"},{type:"button",text:"Introduction",icon:"fas fa-star",action:()=>kiss.router.navigateTo({anchor:"Introduction about KissJS components"})},{type:"button",text:"Text field",icon:"fas fa-font",action:()=>kiss.router.navigateTo({anchor:"Text field"})},{type:"button",text:"Textarea field",icon:"fas fa-paragraph",action:()=>kiss.router.navigateTo({anchor:"Textarea field"})},{type:"button",text:"Number field",icon:"fas fa-list-ol",action:()=>kiss.router.navigateTo({anchor:"Number field"})},{type:"button",text:"Date field",icon:"fas fa-calendar",action:()=>kiss.router.navigateTo({anchor:"Date field"})},{type:"button",text:"Checkbox field",icon:"fas fa-check-square",action:()=>kiss.router.navigateTo({anchor:"Checkbox field"})},{type:"button",text:"Select field",icon:"fas fa-caret-square-down",action:()=>kiss.router.navigateTo({anchor:"Select field"})},{type:"button",text:"Slider field",icon:"fas fa-sliders-h",action:()=>kiss.router.navigateTo({anchor:"Slider field"})},{type:"button",text:"Rating field",icon:"fas fa-star",action:()=>kiss.router.navigateTo({anchor:"Rating field"})},{type:"button",text:"Color picker",icon:"fas fa-paint-brush",action:()=>kiss.router.navigateTo({anchor:"Color picker"})},{type:"button",text:"Icon picker",icon:"fas fa-rocket",action:()=>kiss.router.navigateTo({anchor:"Icon picker"})},{type:"button",text:"Buttons",icon:"fas fa-square",action:()=>kiss.router.navigateTo({anchor:"Buttons"})},{type:"button",text:"Html",icon:"fas fa-code",action:()=>kiss.router.navigateTo({anchor:"Html"})},{type:"button",text:"Back to Home",icon:"fas fa-arrow-left",fontWeight:"bold",action:()=>kiss.router.navigateTo({section:"home",anchor:"What is KissJS?"})}]})}});kiss.app.defineView({id:"containers-content",renderer:function(id,target){return createBlock({id:id,target:target,styles:{this:"user-select: none; background: #ffffff"},items:[showCase("Introduction about containers",kiss.doc.containers),showCase("Block",kiss.doc.block,{id:"container-block",borderStyle:"solid",borderWidth:"2px",borderRadius:"20px",borderColor:"#ffffff",background:"linear-gradient(129deg, rgba(0,215,238,1) 0%, rgba(148,45,253,1) 100%)",boxShadow:"5px 5px 10px #dddddd",padding:"32px",items:[{type:"text",label:"Field 01",styles:{"field-label":"color: #ffffff; font-weight: bold"}},{type:"text",label:"Field 02",styles:{"field-label":"color: #ffffff; font-weight: bold"}}]},{id:"container-block-layout",height:400,boxShadow:"5px 5px 10px #8aa2c8",style:"color: #ffffff;",layout:"vertical",items:[{id:"top-bar",type:"block",flex:1,height:"20px",background:"#8aa2c8",items:[{type:"html",html:"top-bar"}]},{id:"main",layout:"horizontal",flex:5,items:[{id:"nav-bar",type:"block",flex:1,background:"#00aaee",items:[{type:"html",html:"nav-bar"}]},{id:"content-container",flex:3,overflow:"auto",items:[{id:"content",type:"block",background:"#8c4bff",height:400,items:[{type:"html",html:"content"}]},{id:"content-footer",type:"block",height:100,background:"#aa0088",items:[{type:"html",html:"content-footer"}]}]}]}]}),showCase("Panel",kiss.doc.panel,{id:"container-panel",type:"panel",title:"I'm a Panel",icon:"fas fa-rocket",closable:true,collapsible:true,boxShadow:"5px 5px 10px #000000",items:[{type:"text",label:"Field 03"},{type:"text",label:"Field 04"}]}),showCase("Form",kiss.doc.form,{id:"my-form",type:"panel",title:"I'm a panel containing fields",border:"solid 1px #cccccc",borderRadius:"16px 0px 16px 0px",layout:"vertical",defaultConfig:{labelWidth:150,fieldWidth:150},items:[{type:"text",id:"firstName",label:"First name",value:"Bob"},{type:"text",id:"lastName",label:"Last name",value:"Wilson"},{type:"date",id:"birthDate",label:"Birth date",value:(new Date).toISO()},{type:"button",float:"right",icon:"fas fa-check",text:"Submit!",action:()=>{createDialog({type:"message",title:"Your form values are...",message:JSON.stringify($("my-form").getData())}).render()}}]})]})}});kiss.doc.containers=`KissJS containers are components that can contain other components, thanks to their **items** property.\nA container can also contain other containers, and nesting containers is how we build complex layouts with KissJS.`;kiss.doc.block=`The **Block** is the simplest container.\n\n    let myBlock = createBlock({\n        items: [\n            // Your items here...\n        ]\n    })\n    \nYou can build complex layouts by nesting blocks, and you can arrange them vertically or horizontally using their **display** and **flexFlow** CSS rules.\nTo build a layout which is split **horizontally**, use a **row** layout:\n\n    {\n        id: "horizontal-layout",\n        display: "flex",\n        flexFlow: "row",\n        items: [\n            {\n                type: "html",\n                html: "LEFT",\n                width: "200px"\n            },\n            {\n                type: "html",\n                html: "RIGHT",\n                width: "200px"\n            }\n        ]\n    }\n    \n    \nTo build a layout which is split **vertically**, use a **column** layout:\n\n    {\n        id: "vertical-layout",\n        display: "flex",\n        flexFlow: "column",\n        items: [\n            {\n                type: "html",\n                html: "TOP",\n                height: "200px"\n            },\n            {\n                type: "html",\n                html: "BOTTOM",\n                height: "200px"\n            }\n        ]\n    }\n\n\nAnd to sum up:\n\n    // Horizontal layout\n    {\n        display: "flex",\n        flexFlow: "row",\n        items: [\n            // Your items organized horizontally\n        ]\n    }\n\n    // Vertical layout\n    {\n        display: "flex",\n        flexFlow: "column",\n        items: [\n            // Your items organized vertically\n        ]\n    }\n\nIn general, we do prefer following W3C standards so that it's not necessary to learn extra framework jargon.\nNevertheless, building layouts is a recurring tasks and we've introduced a shortcut property called "layout".\nSo, you can also build a vertical or horizontal layout using this syntax:\n\n    // Horizontal layout\n    {\n        layout: "horizontal",\n        items: [\n            // Your items organized horizontally\n        ]\n    }\n\n    // Vertical layout\n    {\n        layout: "vertical",\n        items: [\n            // Your items organized vertically\n        ]\n    }    \n`;kiss.doc.panel=`The **Panel** is a container with a header and few other properties (like **closable**, **draggable**, **collapsible**, **expandable**, ...)\n    \n    let myPanel = createPanel({\n        title: "My title",\n        icon: "fas fa-check", // <= A Font Awesome icon class here\n        closable: true,\n        draggable: true,\n        modal: true,\n        items: [\n            // Your items here...\n        ]\n    })`;kiss.doc.form=`To create a form, just use a standard container (block or panel) with fields.\nEvery container has a **getData()** method which returns the values of all the contained fields (including within nested containers):\n\n    let myForm = createBlock({\n        items: [\n            {\n                type: "text",\n                label: "First name"\n            },\n            {\n                type: "text",\n                label: "Last name"\n            },\n            {\n                type: "date",\n                label: "Birth date"\n            },\n            {\n                type: "button",\n                text: "Submit",\n                action: () => {\n                    let myFormData = myForm.getData()\n                    console.log(myFormData)\n                }\n            }\n        ]\n    })\n`;kiss.app.defineView({id:"containers-menu",renderer:function(id,target){return createBlock({id:id,target:target,defaultConfig:{height:40,textAlign:"left",iconSize:"18px",iconColor:"#8aa2c8",borderColor:"#e3e5ec",borderWidth:"1px 0px 0px 0px",borderRadius:"0px",backgroundColor:"#f3f5f7",colorHover:"#00aaee",iconColorHover:"#00aaee",backgroundColorHover:"#e5e9ec"},layout:"vertical",items:[{type:"html",html:"Containers",class:"navigation-title"},{type:"button",text:"Introduction",icon:"fas fa-info",action:()=>kiss.router.navigateTo({anchor:"Introduction about containers"})},{type:"button",text:"Block",icon:"fas fa-code",action:()=>kiss.router.navigateTo({anchor:"Block"})},{type:"button",text:"Panel",icon:"fas fa-window-maximize",action:()=>kiss.router.navigateTo({anchor:"Panel"})},{type:"button",text:"Form",icon:"far fa-file-alt",action:()=>kiss.router.navigateTo({anchor:"Form"})},{type:"button",text:"Back to Home",icon:"fas fa-arrow-left",fontWeight:"bold",action:()=>kiss.router.navigateTo({section:"home",anchor:"What is KissJS?"})}]})}});kiss.app.defineView({id:"datatable-content",renderer:function(id,target){localStorage.setItem("config-layout-attachment","thumbnails-large");let fakeModelTemplate=createFakeModel();fakeModelTemplate.id="fake";let fakeModel=new kiss.data.Model(fakeModelTemplate);let fakeCollection=fakeModel.collection;let columns=fakeModel.getFieldsAsColumns();columns.push({type:"button",text:"View",width:50,button:{tip:"Custom button example",icon:"fas fa-eye",action:(rowIndex,colIndex,recordId,record)=>{log(record);let recordToHtml=`<h2>Record clicked</h2><font style="font-family: sans-serif">`+toHTML(record)+"</font>";createNotification({message:recordToHtml,width:1e3,duration:2e3})}}});columns.push({type:"button",width:140,button:{text:"Other button",action:(rowIndex,colIndex,recordId,record)=>{createNotification({message:"Record id: "+recordId})}}});kiss.selection.reset("myDatatable");let datatable=createDatatable({id:"myDatatable",color:"#00aaee",collection:fakeCollection,columns:columns,canEdit:true,canAddField:false,canEditField:false,canCreateRecord:true,height:()=>kiss.screen.current.height-50,actions:["-",{text:"Sort by Category (asc) and Platform (desc)",icon:"fas fa-sort",action:()=>{$("myDatatable").sortBy([{category:"asc"},{platform:"desc"}])}},{text:"Group by Category and Platform",icon:"far fa-clone",action:()=>{$("myDatatable").groupBy(["category","platform"]);setTimeout((()=>{$("myDatatable").collapseAll();createNotification("Records grouped by Category and Platform")}),2e3)}},{text:"Add 1000 records...",icon:"fas fa-database",action:()=>{fakeCollection.hasChanged=true;fakeCollection.insertFakeRecords(1e3);createNotification("Records inserted!")}},{text:"Show selection in the console",icon:"fas fa-check",action:()=>{log("pickaform - Selected records:",0,$("myDatatable").getSelectedRecords())}},{icon:"fa fa-download",text:txtTitleCase("Download selection as JSON"),action:async()=>{let selectedRecords=$("myDatatable").getSelectedRecords();let exportRecords=[];for(let record of selectedRecords)exportRecords.push(await record.getData());let textFile=JSON.stringify(exportRecords);let blob=new Blob([textFile],{type:"application/json"});let url=URL.createObjectURL(blob);let sourceUrl=`<br><br><center><a href="${url}" download="export.json">${txtTitleCase("download file")}</a></center>`;createDialog({type:"message",title:txtTitleCase("Download selection as JSON"),message:txtTitleCase("Click on the link to download your JSON file")+sourceUrl,buttonOKText:txtTitleCase("Done")})}}],methods:{selectRecord:async record=>createForm(record,fakeModel),async createRecord(model){record=model.create();const success=await record.save();if(!success)return;createForm(record)}}});return createBlock({id:id,target:target,style:"user-select: none; background: #ffffff;",height:"100%",items:[datatable],methods:{load:()=>{if(fakeCollection.records.length>0)return;fakeCollection.insertFakeRecords(5e3)}}})}});kiss.doc.datatables=`\nKissJS datatables are really powerful and fast components to display your data.\n`;kiss.app.defineView({id:"datatable-menu",renderer:function(id,target){return createBlock({id:id,target:target,defaultConfig:{height:40,textAlign:"left",iconSize:"18px",iconColor:"#8aa2c8",borderColor:"#e3e5ec",borderWidth:"1px 0px 0px 0px",borderRadius:"0px",backgroundColor:"#f3f5f7",colorHover:"#00aaee",iconColorHover:"#00aaee",backgroundColorHover:"#e5e9ec"},layout:"vertical",items:[{type:"html",html:"Datatable",class:"navigation-title"},{type:"button",text:"Example with 5000 records",icon:"fas fa-info",action:()=>kiss.router.navigateTo({anchor:"Introduction about KissJS datatable"})},{type:"button",text:"Back to Home",icon:"fas fa-arrow-left",fontWeight:"bold",action:()=>kiss.router.navigateTo({ui:"start",section:"home"})}]})}});kiss.app.defineView({id:"gallery-content",renderer:function(id,target){let fakeModelTemplate=createFakeModel();fakeModelTemplate.id="fakeGallery";let fakeModel=new kiss.data.Model(fakeModelTemplate);let fakeCollection=fakeModel.collection;let fakeAttachmentField='[{"id":"01887414-3775-7443-81bc-260a9539d7e4","filename":"cyberpunk-cantina-Women-Cyberpunk-ZEN6auDj.png","path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-ZEN6auDj.png","size":1279664,"type":"amazon_s3","mimeType":"image/png","thumbnails":{"s":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-ZEN6auDj.64x64.png","size":6106},"m":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-ZEN6auDj.256x256.png","size":87845},"l":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-ZEN6auDj.512x512.png","size":332583}},"accessReaders":["*"],"createdAt":"2023-05-31T23:10:59.240Z","createdBy":"david.grossi@pickaform.com"},{"id":"01887414-379e-701e-b4dc-15301d8b4560","filename":"cyberpunk-cantina-Women-Cyberpunk-RUyLqAZl.png","path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-RUyLqAZl.png","size":1360256,"type":"amazon_s3","mimeType":"image/png","thumbnails":{"s":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-RUyLqAZl.64x64.png","size":6080},"m":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-RUyLqAZl.256x256.png","size":89129},"l":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-RUyLqAZl.512x512.png","size":337313}},"accessReaders":["*"],"createdAt":"2023-05-31T23:10:59.240Z","createdBy":"david.grossi@pickaform.com"},{"id":"01887414-378a-759d-b17d-762b4dd33b72","filename":"cyberpunk-cantina-Women-Cyberpunk-vfNB7pxJ.png","path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-vfNB7pxJ.png","size":1301698,"type":"amazon_s3","mimeType":"image/png","thumbnails":{"s":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-vfNB7pxJ.64x64.png","size":6193},"m":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-vfNB7pxJ.256x256.png","size":89664},"l":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-vfNB7pxJ.512x512.png","size":331588}},"accessReaders":["*"],"createdAt":"2023-05-31T23:10:59.240Z","createdBy":"david.grossi@pickaform.com"},{"id":"01887414-506f-7707-a529-20a36858b1a8","filename":"cyberpunk-cantina-Women-Cyberpunk-FjFuk2YX.png","path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-FjFuk2YX.png","size":1357025,"type":"amazon_s3","mimeType":"image/png","thumbnails":{"s":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-FjFuk2YX.64x64.png","size":6136},"m":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-FjFuk2YX.256x256.png","size":89761},"l":{"path":"https://pickaform-europe.s3.eu-west-3.amazonaws.com/files/01844399-988f-7974-a68f-92d35fc702cc/2023/06/01/cyberpunk-cantina-Women-Cyberpunk-FjFuk2YX.512x512.png","size":339784}},"accessReaders":["*"],"createdAt":"2023-05-31T23:10:59.240Z","createdBy":"david.grossi@pickaform.com"}]';fakeAttachmentField=JSON.parse(fakeAttachmentField);let columns=fakeModel.getFieldsAsColumns();columns.forEach((column=>{column.hidden=!["category","description"].includes(column.id)}));let gallery=createGallery({id:"myGallery",color:"#00aaee",collection:fakeCollection,columns:columns,canCreateRecord:true,showImage:true,imageFieldId:"attachment",height:()=>kiss.screen.current.height-50,actions:["-",{text:"Sort by Category (asc) and Platform (desc)",icon:"fas fa-sort",action:()=>{$("myGallery").sortBy([{category:"asc"},{platform:"desc"}])}},{text:"Group by Category and Platform",icon:"far fa-clone",action:()=>{$("myGallery").groupBy(["category","platform"])}},{text:"Add 200 records...",icon:"fas fa-database",action:()=>{fakeCollection.hasChanged=true;fakeCollection.insertFakeRecords(200);createNotification("Records inserted!")}}],methods:{selectRecord:async record=>createForm(record,fakeModel),async createRecord(model){record=model.create();const success=await record.save();if(!success)return;createForm(record)}}});return createBlock({id:id,target:target,style:"user-select: none; background: #ffffff;",height:"100%",items:[gallery],methods:{load:()=>{if(fakeCollection.records.length>0)return;fakeCollection.insertFakeRecords(1e3).then((()=>{setTimeout((()=>{fakeCollection.records.forEach((record=>record.attachment=fakeAttachmentField));$("myGallery")._renderDetailsOfVisibleCards();$("myGallery")._renderGalleryBody()}),2e3)}))}}})}});kiss.doc.galleries=`\n    KissJS galleries are great and simple components to manage your images.\n`;kiss.app.defineView({id:"gallery-menu",renderer:function(id,target){return createBlock({id:id,target:target,defaultConfig:{height:40,textAlign:"left",iconSize:"18px",iconColor:"#8aa2c8",borderColor:"#e3e5ec",borderWidth:"1px 0px 0px 0px",borderRadius:"0px",backgroundColor:"#f3f5f7",colorHover:"#00aaee",iconColorHover:"#00aaee",backgroundColorHover:"#e5e9ec"},layout:"vertical",items:[{type:"html",html:"Gallery",class:"navigation-title"},{type:"button",text:"Example with 1000 records",icon:"fas fa-info",action:()=>kiss.router.navigateTo({anchor:"Introduction about KissJS gallery"})},{type:"button",text:"Back to Home",icon:"fas fa-arrow-left",fontWeight:"bold",action:()=>kiss.router.navigateTo({ui:"start",section:"home"})}]})}});kiss.app.defineView({id:"home-content",renderer:function(id,target){return createBlock({id:id,target:target,styles:{this:"background: #ffffff"},items:[showCase("What is KissJS?",kiss.doc.concepts),showCase("Philosophy",kiss.doc.philosophy),showCase("Efficiency",kiss.doc.efficiency),showCase("Dumb code",kiss.doc.dumbCode),showCase("Features",kiss.doc.features),showCase("Technically",kiss.doc.technically),showCase("Quickstart",kiss.doc.quickstart),showCase("Library resources",kiss.doc.libraryResources),showCase("Coding style",kiss.doc.codingStyle),showCase("About the author's beliefs",kiss.doc.beliefs)]})}});kiss.doc.concepts=`\nKissJS is a simple javascript library to build web applications.\nIt stands for **Keep It Simple Stupid Javascript**, because it was built following the KISS principles.\n\nKissJS was born from the frustration that all mainstream libraries (or frameworks) like Angular, React, Vue, ExtJS, Webix, ... are easy to learn, but very difficult to master.\nWe deeply believe that web development should be user friendly, and should not require mastering **anything beyond Javascript, HTML and CSS**.\n\nKissJS was developed with the central idea that you should focus on **coding** your project rather than spending time reading tons of documentations and forums.\nJavascript **fatigue** is a well-known phenomenon that has made good fellows feel depressed and exhausted because there is **so much** to learn and **so many new libraries every day** that you never know what to choose before writing your first line of code!\n\nOh, sure, a new library like KissJS also contributes to the Javascript fatigue...\nBut the library has been built to introduce as few concepts as possible, and anyone who knows Javascript, HTML and CSS can really **master** the library very quickly.\nThen, you'll never have to go back to this **boring** documentation again.\n`;kiss.doc.philosophy=`\n- build your UI programmatically using only javascript\n- no dependencies\n- follow W3C standards as often as possible: pure HTML, CSS, and Javascript\n- keep the library's "jargon" to the bare minimum\n- explicit is better than implicit: hiding logic into a black box makes things harder to understand and to maintain\n- don't add **super-proprietary-markup** into the HTML: it's ugly and requires ultra-specific framework knowledge\n- data binding is like **implicit hidden stuff doing magic in your back**. Instead, KissJS uses an **explicit** PubSub mechanism\n- works offline: **no web server needed** to start coding and testing your project. Launch any code editor and you're good to start immediately\n- no magic tricks, no ninja concept where you need 2 months fulltime before mastering the library\n- massively commented code so that beginners don't feel shy about reading the source code\n- dumb code, for dummies\n`;kiss.doc.efficiency=`\nOK. Another JS library... Now what?\nCan you really build something out of it?\n\nActually, yes: <a href="https://pickaform.fr/en" target="_new">pickaform</a>.\n\nPickaform is now used by several large companies - mostly with private on-premise installations or private cloud, as large company don't like the public cloud.\nIt delivers just what it says: it's a no-code platform for creating real-world workflows for people who need to collaborate with better processes.\nThanks to the simplicity of KissJS, we were able to build this complete no-code platform similar to AirTable and Infinity, but with features that are more focused on bigger companies.\n\nFor example:\n- better form layout capabilities when there are many fields in a record (by many, we mean +200 fields in a single form. We have customers in Insurance and Banking business who do that)\n- a real workflow engine, worklow in the sense of "business process", and not "workflow automation"\n- ability to generate PDF documents by filling Microsoft Word templates with form data\n- a good security layer which enables the users to fine tune the access for workspaces, apps, models, and views\n- a more flexible architecture where models and views can be shared among multiple applications\n- a speed that would require a lot of optimization efforts with React, Angular or Vue: those frameworks are fantastic to build web products and mobile apps, but not very well suited to build very fast business apps\n- don't believe me about the speed? Load 100 000 records into Infinity (a Vue application), then compare their datatable performance with KissJS datatable, and don't forget to open the dev panel to check memory leaks...\n\nThis performance of KissJS is native: you don't have anything to optimize. It's just fast out-of-the-box.\n\nAs far as "business apps" are concerned, ExtJS was very good at building this, but then became this huge monster with so many tentacles (not to mention the price).\nWebix is still probably one of the best out there, but a bit expensive compared to its non-existent community, and unfortunately we've sometimes been stuck with bugs that took months to be fixed.\nIn the end, we needed something "between" these worlds, able to build UIs quickly and mainly with JS, but requiring no complexity, no building process, no imposed and sometimes cumbersome architecture.\nAnd on top of it, **something as standard as possible**: why should a field property be called "mandatory" (I'm looking at you, ExtJS) when the W3C has already defined a field property called "required"?\n\nWell, in a nutshell: **something simple**.\n`;kiss.doc.dumbCode=`KissJS is written in **Dumb Code**.\n\nWhat does it mean?\nInstead of writing this kind of ninja code:\n\n    const mdls = ctx.apps[rt.get().appId].getMdls()\n\nDumb code achieves the same result like this:\n\n    // Get the application id from the current route\n    const route = router.getRoute()\n    const applicationId = route.applicationId\n\n    // Retrieve the current application and get its models\n    const application = kiss.context.applications[applicationId]\n    const models = application.getModels()\n\nSure, it's a bit longer to write!\nAs a result, the code is much easier to read and understand for humans.\nAnd we **prefer (dumb) humans** to machines.\n\nDumb code is used everywhere in KissJS, except when it can impact rendering performances or user experience, because performance is a high priority of the framework.\n`;kiss.doc.beliefs=`\nAs the founder and CEO of pickaform, I have a pretty good background in computer games - I started at 8 years old with [Donkey Kong Junior on an LCD screen](https://www.youtube.com/watch?v=qpf5gpQ0i28) - and since then, I've been amazed at the evolution in the video games industry.\nI have probably seen, played, and enjoyed all the evolutions and revolutions in video games.\nVideo games led me to become a computer engineer at the end of the last millennium (yeah, I know...)\n\nAlthough I spent 6 years in the video games industry as a project manager, my main activity was to create custom applications for all types of business, large and small, regardless of the technology available, but mainly using IBM software.\nI have developed and delivered over 100 applications for my clients and eventually became an IBM Champion in 2019 for my collaboration platform called Pickaform, a no-code platform based on IBM technology, targeting non-technical people to create their own business applications.\n\nI got this title not because of the technical side, but because of the product itself and the main philosophy behind it: building business applications using only very simple components.\nWith Pickaform, you can really build useful applications for your business using just a few forms and built-in features like "workflows", "Form to PDF", "file attachments", "comments", "tagging"...\nPickaform concepts were born before Podio, before Quickbase, before AirTable, before FormStack, before the so-called "no-code" era.\n\nMy ambition is the same for KissJS: providing a very simple javascript library for building great web applications without (too much) complexity.\n\nNow that you know my background - gamer and developer - I can get to the point.\nDuring all these years, I've followed the evolutions of web development and was particularly interested in the evolution of UI frameworks.\nAnd I have to say that things have gotten overly complicated in this industry.\n\nDue to my job, I had to use and test a lot of different frameworks, and at one point I realized that **I was litteraly spending more time in the documentations than coding the products for my clients**.\n\nIn today's world, it takes 2-3 months for an average coder to *master* a new framework.\nI insist on the word *master*, because, sure, you can make this *TodoMVC* app in 5 minutes on whatever framework!\nBut in real-life situations you'll probably have to dive into the documentation and forums over and over again to figure out what is the best practice for *this* or *that*, and how to solve your problem in *this* particular framework.\nIt requires **months** of experience.\n\nAnd **when such thing as a virtual DOM was born, I was definitely convinced that things were terribly wrong in web developement.**\nSeriously: why should I need a virtual DOM to boost the performances of a simple webpage when I have a multi-core CPU and 16Gb RAM?\nHow to explain that, at the same time, on the same machine, I can render 3D video games displaying 60 million triangles per second, with texturing and ray-tracing?\nSo, yes, I'm pretty confident when I say something went wrong in web development...\n\nMy belief is that if you are an **average coder** with a good knowledge of HTML, CSS, and vanilla Javascript:\n- you **should** be able to build a great web app without having to spend months before <u>mastering</u> your framework\n- it **should** have good performances, because the DOM is not that slow if you are careful not to overload your markup\n\nKissJS is our attempt to keep things as simple as possible.\nI'm also clear-headed:\n- we probably reinvented the wheel (again)\n- we probably made the same mistakes other people have made before us\n\nBut in the end, the result is damn fast, fairly easy to use, we had fun building it, and now we're happy to share it!\n`;kiss.doc.features=`\n## UI Components\nKissJS offers some useful <a href="javascript:kiss.router.navigateTo({ui: 'start', section: 'components', anchor: 'Introduction about KissJS components'})">UI components</a> out-of-the-box.\nBut it's also very easy to build a new component from scratch, because **anything** that returns an HTMLElement can be a component.\n\nFor example, you could create a small function that returns a div element with some custom content and decide to make it a reusable component.\nKissJS would accept it as any other built-in component, **without any restrictions or constraints**.\nCould you imagine something more flexible to build your UI?\n\n## A word about KissJS datatable\nKissJS <a href="javascript:kiss.router.navigateTo({ui: 'start', section: 'datatable'})">datatable</a> is highly capable.\nThanks to its virtual scrolling, it can handle tens of thousands of records without any problem.\n\nThe datatable built-in features are:\n- column hiding\n- column moving (drag&drop)\n- column resizing\n- multi-column sorting\n- multi-column grouping which works with the virtual scrolling (thanks to state caching)\n- virtual scrolling\n- paging (which works together with virtual scrolling)\n- custom column renderers\n- column buttons, to perform actions at row level\n- row selection\n- cell editing\n- customizable action menu\n\nIt also demonstrates that vanilla javascript and a simple DOM strategy lead to excellent performances.\n\n## Bonus stuff\nAt the beginning of the project, KissJS was a pure **client-side UI library**.\nSlowly but surely, it slept a bit outside its initial goal to become more than that.\nNow, there is a bunch of cool stuff packaged in the library. Use it or don't use it, but it's here!\n\nIt includes (but not only):\n- **view manager**, if you want to use KissJS not only for its UI Components, but also to build a complete application with multiple views\n- **client router** which works 100% offline, without any web server and even with file:/// paths\n- **pubsub** which is at the heart of the components reactivity\n- **NoSQL database wrapper** which allows to work in memory, offline, or online\n- **NoSQL data layer** to manage Models, Collections, Records, and automate the updates when records have relationships\n\n... and now a **KissJS server** (Node/Mongo) is also on its way, and will apply the same KISS principles. Stay tuned!\n\n`;kiss.doc.technically=`\nKissJS components are Custom Web Components.\nThey all derive from HTMLElement, and therefore inherit all native DOM operations.\n\nMost UI frameworks are encapsulating DOM elements with classes.\nInstead of that, KissJS is directly attaching new properties and new methods to DOM elements.\n\nLet's imagine a Panel component built with KissJS.\nYou can get your panel using native DOM operations, and manipulate it using its custom methods, like this:\n\n    const myPanel = document.getElementById("my-panel")\n    myPanel.expand()\n    myPanel.setAnimation("shakeX")\n\nThis way of working directly with the DOM avoids the overhead of encapsulation, because there is no additional layer to cross.\nIt's also easier to keep the memory clean: when you destroy your DOM element, everything attached to it (states, events...) is flushed and can be garbage collected.\nThe only constraint is to not collide with native DOM methods, but it's easy enough and not really a problem.\n\nKissJS components are also recognizable and easy to lookup in the DOM because their tag name always starts with "a-", like:\n&lt;a-field>, &lt;a-button>, &lt;a-panel>, &lt;a-menu>, and so on...\n`;kiss.doc.quickstart=`\n1) **Right-click** the links below and download the files from our CDN:\n    - <a href="./resources/doc/cdn/index.html" download>Sample index.html</a>\n    - <a href="./resources/doc/cdn/index.js" download>Sample index.js</a>\n\n2) Launch index.html (no web server needed)\n\n3) Open index.js and start coding your own project using KissJS components!\n`;kiss.doc.libraryResources=`\nIf you prefer having the resources locally, you can download them from the following links.\n\nInsert this code into the **head** of your index.html file.\nDon't forget to adjust the paths according to your project:\n\n    \x3c!-- FONT AWESOME --\x3e\n    <link rel="stylesheet" href="./webfonts/fontawesome-all.min.css"/>\n\n    \x3c!-- KISSJS CSS --\x3e\n    <link rel="stylesheet" href="./styles/kissjs.css">\n\n    \x3c!-- KISSJS --\x3e\n    <script type="text/javascript" src="./kissjs.min.js"><\/script>\n\n    \x3c!-- YOUR ROOT JAVASCRIPT FILE --\x3e\n    <script type="text/javascript" src="./index.js"><\/script>\n\nIn your index.js file\n\n    // DOM needs to be loaded, so we put our code inside window.onload:\n    window.onload = function () {\n\n        // Build your UI with KissJS components\n        const myButton = createButton({\n            text: "Click me!",\n            icon: "fas fa-check",\n            action: () => alert("click!")\n        })\n\n        // Render your component\n        myButton.render()\n    }\n\nHere are the download links to the resources:\n\n1/ Webfonts:\n- <a href="./resources/lib/kissjs/webfonts/fa-brands-400.woff2" download>Font Awesome brand icons</a>\n- <a href="./resources/lib/kissjs/webfonts/fa-regular-400.woff2" download>Font Awesome regular icons</a>\n- <a href="./resources/lib/kissjs/webfonts/fa-solid-900.woff2" download>Font Awesome solid icons</a>\n- <a href="./resources/lib/kissjs/webfonts/fontawesome-all.min.css" download>Font Awesome style sheet</a>\n\n2/ KissJS:\n- <a href="./resources/lib/kissjs/kissjs.min.js" download>Javascript library</a>\n- <a href="./resources/lib/kissjs/kissjs.css" download>Base CSS</a>\n\n3/ Not required, but can help:\n- <a href="./resources/doc/index.html" download>Sample index.html</a>\n- <a href="./resources/doc/index.js" download>Sample index.js</a>\n\n4/ Alternatives colors & geometry\n\n\nCOLORS:\n- <a href="./resources/lib/kissjs/styles/colors/light.css" download>CSS for light color theme</a>\n- <a href="./resources/lib/kissjs/styles/colors/dark.css" download>CSS for dark color theme</a>\n- <a href="./resources/lib/kissjs/styles/colors/blue.css" download>CSS for blue color theme</a>\n- <a href="./resources/lib/kissjs/styles/colors/green.css" download>CSS for green color theme</a>\n- <a href="./resources/lib/kissjs/styles/colors/pink.css" download>CSS for pink color theme</a>\n- <a href="./resources/lib/kissjs/styles/colors/purple.css" download>CSS for purple color theme</a>\n\n\nGEOMETRIES:\n- <a href="./resources/lib/kissjs/styles/geometry/default.css" download>CSS for default geometry</a>\n- <a href="./resources/lib/kissjs/styles/geometry/sharp.css" download>CSS for sharp geometry</a>\n- <a href="./resources/lib/kissjs/styles/geometry/round.css" download>CSS for round geometry</a>\n- <a href="./resources/lib/kissjs/styles/geometry/mobile.css" download>CSS for mobile geometry</a>\n\nIn case you decide to use the sample **index.html** and sample **index.js** above, please copy all the webfonts and CSS resources inside subfolders, so that your project looks like:\n\n    webfonts/fa-brands-400.woff2\n    webfonts/fa-regular-400.woff2\n    webfonts/fa-solid-900.woff2\n    webfonts/fontawesome-all.min.css\n    styles/kissjs.css\n    index.html\n    index.js\n    kissjs.min.js\n    \n`;kiss.doc.codingStyle=`\nKissJS has the following coding style, and you won't necessary agree with it.\n\n**No semicolon**\nExcept the one at the end of a js file in order to avoid problems with minification. And that's it.\nIf you wonder why, it's because semicolons are unuseful extra characters that don't even always solve the [ASI problem](https://medium.com/@DanInProgress/javascript-semicolons-are-bad-actually-7c311195001c).\nWhy should we type extra characters, then?\n\n**Expressive variable names:**\n\n    // Nope\n    const na = pa - d\n\n    // Too much\n    const newBillingAmount = previousBillingAmount - specialCustomerDiscountOfTheDay\n\n    // OK\n    const newAmount = previousAmount - discount\n\n**Camel case for variable names, title case for class names:**\n\n    class Car {\n        constructor(config) {\n            //...\n        }\n    }\n\n    const myCar = new Car(config)\n\n**Double-quote for strings**\nNearly every javascript library we know sticks to single quotes, but we're not really sure why.\nDouble quotes make it simpler to store "real-life" strings:\n\n    // Boooooooooooooring\n    myString = 'I don\\'t know if it\\'s John\\'s car or Sam\\'s. Let\\'s check!'\n\n    // Obvious\n    myString = "I don't know if it's John's car or Sam's car. Let's check!"\n\nSome people might object that single quotes are better for storing HTML, but that's no longer true because string literals are better suited for that.\n\n**JSDoc compatible headers for all functions + a line break just before the @example:**\n\n    /**\n     * Creates a new user\n     * \n     * @async\n     * @param {object} config\n     * @param {string} config.firstName - The first name\n     * @param {string} config.lastName - The last name\n     * @returns {object} The created user\n     * \n     * @example\n     * const newUser = await createUser(config)\n     */\n    async function createUser(config) {\n        return new User({\n            firtName: config.firstName,\n            lastName: config.lastName\n        })\n    }\n\nFinally, we all know that clean code doesn't need comments because it's self explanatory.\nNevertheless, **good comments** can have a huge impact on the learning curve: they are important for beginners, and **we care about beginners**.\n\nFor this, a comment can't be something you throw in the face of the next developer to give him a hint about your code.\nA comment should be carefully written, well spelled and accurate.\n\nWe also know that our brain is focused on the line immediately following a white line.\nFor this reason, a comment should be preceded by a single empty line.\n    \nHere are bad examples:\n\n    //Nope: Leave a space after the slash\n    let notStickOurComments\n\n    // nope: don't start with lowercase\n    let titleCaseOurComments\n    // Leave a white line before\n    let spaceOurComments\n\n\n\n    // Nope: just one line before, not more\n    let notSpaceTooMuch\n\n    // Nope: be careful about how u spell ur comentz\n    let checkTheSpell\n\n    // NOpE: BE conSIstant about the CASe\n    let doProperCase\n\nHere is a clean example:\n\n    // This is a comment\n    let doThis\n\n    // This is another one\n    let doThat\n\n    // Don't hesitate to write *real* sentences, with a verb...\n    let writeUsefulComments    \n`;kiss.app.defineView({id:"home-menu",renderer:function(id,target){return createBlock({id:id,target:target,defaultConfig:{height:40,color:"#667788",colorHover:"#00aaee",backgroundColor:"#f3f5f7",backgroundColorHover:"#e5e9ec",textAlign:"left",iconSize:"18px",iconColor:"#8aa2c8",iconColorHover:"#00aaee",borderColor:"#e3e5ec",borderWidth:"1px 0px 0px 0px",borderRadius:"0px"},layout:"vertical",items:[{type:"html",html:"Home",class:"navigation-title"},{type:"button",text:"Introduction",icon:"fas fa-star",action:()=>kiss.router.navigateTo({anchor:"What is KissJS?"})},{type:"button",text:"Philosophy",icon:"fas fa-heart",action:()=>kiss.router.navigateTo({anchor:"Philosophy"})},{type:"button",text:"Efficiency",icon:"fas fa-fighter-jet",action:()=>kiss.router.navigateTo({anchor:"Efficiency"})},{type:"button",text:"Dumb code",icon:"fas fa-smile fa-rotate-180",action:()=>kiss.router.navigateTo({anchor:"Dumb code"})},{type:"button",text:"Features",icon:"fas fa-list",action:()=>kiss.router.navigateTo({anchor:"Features"})},{type:"button",text:"Technically",icon:"fas fa-wrench",action:()=>kiss.router.navigateTo({anchor:"Technically"})},{type:"button",text:"Quickstart",icon:"fas fa-rocket",action:()=>kiss.router.navigateTo({anchor:"Quickstart"})},{type:"button",text:"Library resources",icon:"fas fa-bolt",action:()=>kiss.router.navigateTo({anchor:"Library resources"})},{type:"button",text:"Coding style",icon:"fas fa-thumbs-up",action:()=>kiss.router.navigateTo({anchor:"Coding style"})},{type:"button",text:"About the author's beliefs",icon:"fas fa-eye",action:()=>kiss.router.navigateTo({anchor:"About the author's beliefs"})},{type:"button",text:"UI: Components",icon:"fas fa-cube",iconColor:"#8c4bff",action:()=>kiss.router.navigateTo({section:"components",anchor:"Introduction about KissJS components"})},{type:"button",text:"UI: Containers",icon:"far fa-clone",iconColor:"#8c4bff",action:()=>kiss.router.navigateTo({section:"containers",anchor:"Introduction about KissJS containers"})},{type:"button",text:"UI: Datatable",icon:"fas fa-table",iconColor:"#8c4bff",action:()=>kiss.router.navigateTo({section:"datatable",anchor:"Introduction about KissJS datatable"})},{type:"button",text:"UI: Calendar",icon:"fas fa-calendar-alt",iconColor:"#8c4bff",action:()=>kiss.router.navigateTo({section:"calendar",anchor:"Introduction about KissJS calendar"})},{type:"button",text:"UI: Kanban",icon:"fab fa-trello",iconColor:"#8c4bff",action:()=>kiss.router.navigateTo({section:"kanban",anchor:"Introduction about KissJS kanban"})},{type:"button",text:"UI: Timeline",icon:"fas fa-align-left",iconColor:"#8c4bff",action:()=>kiss.router.navigateTo({section:"timeline",anchor:"Introduction about KissJS timeline"})},{type:"button",text:"UI: Gallery",icon:"fas fa-image",iconColor:"#8c4bff",action:()=>kiss.router.navigateTo({section:"gallery",anchor:"Introduction about KissJS gallery"})},{type:"button",text:"Tutorials",icon:"fas fa-user-graduate",iconColor:"#bb22ff",action:()=>kiss.router.navigateTo({section:"tutorials"})},{type:"button",text:"Cheat sheet",icon:"fas fa-lightbulb",iconColor:"#dd0000",action:()=>kiss.router.navigateTo({section:"cheatsheet"})},{type:"button",text:"<b><u>API DOCUMENTATION</u></b>",color:"#8aa2c8",icon:"fas fa-coffee",action:()=>document.location="./doc/out/kiss.html"}]})}});kiss.app.defineView({id:"start",renderer:function(id,target){const isMobile=kiss.tools.isMobile();return createBlock({id:id,target:target,fullscreen:true,width:"100%",margin:"auto",layout:"vertical",items:[{id:"site-topbar",items:[{type:"view",id:"topbar"}]},{flex:1,layout:"horizontal",items:[{id:"site-west",class:"navigation-panel",height:"100%",width:isMobile?"100%":"",layout:"vertical",items:[{type:"view",id:"logo"},{id:"site-navigation",autoSize:true,height:()=>kiss.screen.current.height-170,overflowY:"auto"}]},{id:"site-content",flex:1,height:"100%",overflowY:"auto"}]}],subscriptions:{EVT_ROUTE_UPDATED:msgData=>{if(kiss.router.getRoute().ui=="start"){let newSection=msgData.section;let newAnchor=decodeURI(msgData.anchor);if(newSection){let navigation=kiss.views.show(newSection+"-menu","site-navigation",true);let content=kiss.views.show(newSection+"-content","site-content",true);if(content)content.setAnimation("fadeIn");if($(newAnchor))$(newAnchor).scrollIntoView({behavior:"smooth"})}if(kiss.context.navigation=="hidden")$("site-west").hide()}},EVT_WINDOW_RESIZED:function(){this.updateLayout()}},methods:{updateLayout(){if(kiss.router.getRoute().ui=="start"){if(kiss.screen.current.width<900||kiss.tools.isMobile()){$(id).showVertically()}else{$(id).showHorizontally()}}},showVertically(){kiss.context.navigation="hidden";$("side-menu").show();$("site-west").style.position="fixed";$("site-west").style.zIndex=1e3;$("site-west").hide()},showHorizontally(){kiss.context.navigation="visible";$("side-menu").hide();$("site-west").style.position="relative";$("site-west").show()}}})}});kiss.app.defineView({id:"kanban-content",renderer:function(id,target){let fakeModelTemplate=createFakeModel();fakeModelTemplate.id="fakeKanban";let fakeModel=new kiss.data.Model(fakeModelTemplate);let fakeCollection=fakeModel.collection;let columns=fakeModel.getFieldsAsColumns();columns.forEach((column=>{column.hidden=!["gameName","category","platform","reviewed","ratingMetacritic"].includes(column.id)}));let kanban=createKanban({id:"myKanban",color:"#00aaee",collection:fakeCollection,columns:columns,group:["platform"],canEdit:true,canAddField:false,canEditField:false,canCreateRecord:true,height:()=>kiss.screen.current.height-50,actions:["-",{text:"Sort by Category (asc) and Platform (desc)",icon:"fas fa-sort",action:()=>{$("myKanban").sortBy([{category:"asc"},{platform:"desc"}])}},{text:"Group by Category and Platform",icon:"far fa-clone",action:()=>{$("myKanban").groupBy(["category","platform"])}},{text:"Add 200 records...",icon:"fas fa-database",action:()=>{fakeCollection.hasChanged=true;fakeCollection.insertFakeRecords(200);createNotification("Records inserted!")}}],methods:{selectRecord:async record=>createForm(record,fakeModel),async createRecord(model){record=model.create();const success=await record.save();if(!success)return;createForm(record)}}});return createBlock({id:id,target:target,style:"user-select: none; background: #ffffff;",height:"100%",items:[kanban],methods:{load:()=>{if(fakeCollection.records.length>0)return;fakeCollection.insertFakeRecords(1e3)}}})}});kiss.doc.datatables=`\nKissJS kanbans are great and simple components to manage your projects and tasks.\n`;kiss.app.defineView({id:"kanban-menu",renderer:function(id,target){return createBlock({id:id,target:target,defaultConfig:{height:40,textAlign:"left",iconSize:"18px",iconColor:"#8aa2c8",borderColor:"#e3e5ec",borderWidth:"1px 0px 0px 0px",borderRadius:"0px",backgroundColor:"#f3f5f7",colorHover:"#00aaee",iconColorHover:"#00aaee",backgroundColorHover:"#e5e9ec"},layout:"vertical",items:[{type:"html",html:"Kanban",class:"navigation-title"},{type:"button",text:"Example with 1000 records",icon:"fas fa-info",action:()=>kiss.router.navigateTo({anchor:"Introduction about KissJS kanban"})},{type:"button",text:"Back to Home",icon:"fas fa-arrow-left",fontWeight:"bold",action:()=>kiss.router.navigateTo({ui:"start",section:"home"})}]})}});kiss.app.defineView({id:"demo-panel",renderer:function(id,target){return createPanel({id:id,target:target,title:"I'm a demo panel",icon:"fas fa-check",boxShadow:"4px 4px 16px #aaaaaa",closable:true,closeMethod:"hide",draggable:true,headerBackgroundColor:"linear-gradient(45deg, rgba(98,9,255,1) 0%, rgba(140,75,255,1) 100%)",width:550,left:"50%",verticalAlign:"center",layout:"vertical",defaultConfig:{labelPosition:"left",labelWidth:"250px",fieldWidth:"100%"},items:[{id:"First name",type:"text",label:"First name",placeholder:"Enter your first name",events:{change:()=>publish("DATA_HAS_CHANGED")}},{id:"Last name",type:"text",label:"Last name",value:"SMITH (just a default value)",events:{change:()=>publish("DATA_HAS_CHANGED")}},{id:"Today is...",type:"date",label:"Today is...",value:(new Date).toISO(),events:{change:()=>publish("DATA_HAS_CHANGED")}},{id:"Your favorite addictions",type:"select",label:"Your favorite addictions",allowClickToDelete:true,allowSwitchOnOff:true,multiple:true,value:["Kissing"],options:[{value:"Angularing",color:"#00aaee"},{value:"Reacting",color:"#3bc48c"},{value:"Vueing",color:"#cc3300"},{value:"Kissing",color:"#ff9955"}],events:{change:()=>publish("DATA_HAS_CHANGED")}},{id:"Show random text",type:"checkbox",label:"Show random text",iconColorOn:"#00aaee",shape:"switch",events:{change:function(){let dumbHtml=$("dumb-text");let dumbText=kiss.db.faker("description");if(this.getValue()==true){dumbHtml.setInnerHtml(dumbText);dumbHtml.setAnimation("zoomIn").show()}else dumbHtml.hide();publish("DATA_HAS_CHANGED")}}},{id:"dumb-text",type:"html",hidden:true},{id:"data",type:"textarea",label:"Form data",rows:10,subscriptions:{DATA_HAS_CHANGED:function(){const formData=$(id).getData(true);delete formData.data;const formDataAsString=JSON.stringify(formData,null,4);this.setValue(formDataAsString)}}},{layout:"horizontal",margin:"20px 0px 0px 0px",width:"100%",defaultConfig:{flex:1,margin:"5px",borderRadius:"32px",color:"#ffffff",iconColor:"#ffffff",iconSize:"14px",padding:"8px 10px 8px 10px"},items:[{type:"button",text:"Click to swing!",backgroundColor:"#2e1d80",backgroundColorHover:"#4e3da0",icon:"fas fa-sync-alt",action:event=>{if(!$("demo-panel"))kiss.views.show("demo-panel");$("demo-panel").setAnimation({name:"swing",speed:"fast"})}},{type:"button",text:"Click to shake!",backgroundColor:"#8c4bff",backgroundColorHover:"#bc7bff",icon:"fas fa-arrows-alt-h",action:event=>{if(!$("demo-panel"))kiss.views.show("demo-panel");$("demo-panel").setAnimation({name:"shakeX",speed:"fast"})}},{type:"button",text:"Squeeze that code",backgroundColor:"#00aaee",backgroundColorHover:"#30dafe",icon:"fas fa-star",action:event=>{$("code-example").scrollIntoView({behavior:"smooth"});$("code-example").setAnimation({name:"jello",speed:"slow"})}}]}]})}});kiss.app.defineView({id:"landing_features",renderer:function(id,target){return createBlock({id:id,target:target,width:"100%",height:500,margin:"0px 0px 50px 0px",defaultConfig:{padding:"32px",margin:"0px 32px 0px 32px",background:"#ffffff",borderRadius:"10px",boxShadow:"0px 0px 20px #cccccc"},layout:"horizontal",items:[{flex:1,type:"html",html:"HELLO"},{flex:1,type:"html",html:"WORLD"}]})}});kiss.app.defineView({id:"landing-hero",renderer:function(id,target){const isMobile=kiss.tools.isMobile();return createBlock({id:id,target:target,layout:"vertical",alignItems:"center",animation:"rotateIn",height:"100%",items:[{type:"spacer",flex:1},{type:"html",flex:1,html:`<div class="spacer"></div>\n                        <div class="home-title">KISS JS</div>\n                        <div class="home-pitchline">\n                            Keep It Simple Stupid Javascript\n                            <br><br>\n                            A simple library\n                            <br>\n                            to build real business apps\n                        </div>\n                        `.removeExtraSpaces()},{defaultConfig:{color:"#ffffff",fontSize:"2.5vh",margin:"1% 0%",padding:"2vh 2vh",height:"5vh",borderWidth:"1px",borderRadius:"6vh",animation:"zoomIn",backgroundColor:"transparent",backgroundColorHover:"#00000055"},layout:"horizontal",flexWrap:"wrap",justifyContent:"center",width:"100%",items:[{hidden:isMobile,type:"button",text:"Quick overview",action:()=>{$("code-example").scrollIntoView({behavior:"smooth"});if(!$("demo-panel"))kiss.views.show("demo-panel")}},{type:"spacer",width:"2vh"},{type:"button",text:"Live test",action:()=>kiss.router.navigateTo({ui:"live-test"})},{type:"spacer",width:"2vh"},{type:"button",text:"Quick guide",action:()=>{kiss.router.navigateTo({ui:"start",section:"home"})}},{type:"spacer",width:"2vh"},{type:"button",text:"API",action:()=>document.location="./doc/out/kiss.html"}]},{defaultConfig:{color:"#ffffff",fontSize:"1.5vh",margin:"1% 0%",padding:"1.5vh 1.5vh",height:"2.2vh",borderWidth:"1px",borderRadius:"6vh",animation:"zoomIn",backgroundColor:"transparent",backgroundColorHover:"#00000055"},layout:"horizontal",flexWrap:"wrap",justifyContent:"center",width:"100%",items:[{hidden:isMobile,type:"button",text:"Datatable example",action:()=>kiss.router.navigateTo({ui:"start",section:"datatable"})},{type:"spacer",width:"2vh"},{hidden:isMobile,type:"button",text:"Calendar example",action:()=>{kiss.router.navigateTo({ui:"start",section:"calendar"})}},{type:"spacer",width:"2vh"},{hidden:isMobile,type:"button",text:"Kanban example",action:()=>kiss.router.navigateTo({ui:"start",section:"kanban"})},{type:"spacer",width:"2vh"},{hidden:isMobile,type:"button",text:"Timeline example",action:()=>kiss.router.navigateTo({ui:"start",section:"timeline"})},{type:"spacer",width:"2vh"},{hidden:isMobile,type:"button",text:"Gallery example",action:()=>kiss.router.navigateTo({ui:"start",section:"gallery"})}]},{type:"spacer",flex:1}]})}});kiss.app.defineView({id:"landing-page",renderer:function(id,target){return createBlock({id:id,target:target,fullscreen:true,overflowY:"auto",items:[{type:"view",id:"landing-hero"},{hidden:true,type:"html",html:`\n                        <div class="layer">kiss.router</div>\n                        <div class="layer">kiss.ui</div>\n                        <div class="layer">kiss.acl</div>\n                        <div class="layer">kiss.data</div>\n                        <div class="layer">kiss.pubsub</div>\n                        <div class="layer">kiss.websocket</div>\n                    `},{type:"view",id:"landing-sample-code"}],methods:{load:function(){if(kiss.tools.isMobile())return;$("demo-code").innerHTML=texts.showPanelConfig;$("help-simple-api").attachTip(texts.helpSimpleApi);$("help-items").attachTip(texts.helpItems);$("help-events").attachTip(texts.helpEvents);$("help-fields").attachTip(texts.helpFields);$("help-select").attachTip(texts.helpSelect);$("help-checkbox").attachTip(texts.helpCheckbox);$("help-button").attachTip(texts.helpButton);$("help-W3C").attachTip(texts.helpW3C);$("help-font-awesome").attachTip(texts.helpFontAwesome);$("help-layout").attachTip(texts.helpLayout);$("help-animation").attachTip(texts.helpAnimation);$("help-defaults").attachTip(texts.helpDefaults);$("help-pubsub").attachTip(texts.helpPubsub);$("help-subscriptions").attachTip(texts.helpSubscriptions);$("help-override").attachTip(texts.helpOverride);$(id).onscroll=event=>{let pagePosition=$(id).scrollTop;let demoPosition=$("landing-sample-code").offsetTop;if(pagePosition>demoPosition-512){kiss.views.show("demo-panel");if($("demo-panel").isHidden())$("demo-panel")?.show().setAnimation("zoomIn")}else{if($("demo-panel")&&!$("demo-panel").isHidden())$("demo-panel").hide()}}}}})}});kiss.app.defineView({id:"landing-sample-code",renderer:function(id,target){texts.showPanelConfig=`<span id="help-simple-api" class="code-help">createPanel</span>({\n        id: "demo-panel",\n        title: "I'm a demo panel",\n        icon: "fas fa-check",\n        draggable: true,\n        closable: true,\n        <span id="help-items" class="code-help">items:</span> [<div class="code-block">\n            {\n                type: "text",\n                label: "First name",\n                placeholder: "Enter your first name",\n                <span id="help-events" class="code-help">events: {\n                    onchange:</span> () => publish("DATA_HAS_CHANGED")\n                }                \n            },</div><div class="code-block">\n            <span id="help-fields" class="code-help">{\n                type: "text",\n                label: "Last name",\n                value: "SMITH (just a default value)",\n                events: {\n                    onchange: () => publish("DATA_HAS_CHANGED")\n                }                \n            }</span>,</div><div class="code-block">\n            {\n                type: "date",\n                label: "Today is...",\n            },</div><div class="code-block">\n            {\n                <span id="help-select" class="code-help">type: "select",</span>\n                label: "Your favorite addictions",\n                multiple: true,\n                options: [{\n                        value: "Angularing",\n                        color: "#00aaee"\n                    },\n                    {\n                        value: "Reacting",\n                        color: "#3bc48c"\n                    },\n                    {\n                        value: "Vueing",\n                        color: "#cc3300"\n                    },\n                    {\n                        value: "Kissing",\n                        color: "#ff9955"\n                    }\n                ],\n                events: {\n                    onchange: () => <span id="help-pubsub" class="code-help">publish("DATA_HAS_CHANGED")</span>\n                }                \n            },</div><div class="code-block">\n            {\n                type: "checkbox",\n                label: "Random text",\n                <span id="help-checkbox" class="code-help">shape: "switch",</span>\n                iconColorOn: "#00aaee",\n                <span id="help-events" class="code-help">events: {\n                    onchange:</span> function() {\n                        let dumbHtml = $("dumb-text")\n                        let dumbText = kiss.db.faker("description")\n    \n                        if (this.getValue() == true) {\n                            dumbHtml.setValue(dumbText)\n                            dumbHtml.setAnimation("zoomIn").show()\n                        }\n                        else dumbHtml.hide()\n\n                        publish("DATA_HAS_CHANGED")\n                    }\n                }\n            },</div><div class="code-block">\n            {\n                id: "dumb-text",\n                type: "html",\n                <span id="help-W3C" class="code-help">hidden: true</span>\n            },</div><div class="code-block">\n            {\n                id: "data",\n                type: "textarea",\n                label: "Form data",\n                rows: 10,\n                <span id="help-subscriptions" class="code-help">subscriptions: {\n                    DATA_HAS_CHANGED:</span> function() {\n                        const formData = $(id).getData(true)\n                        delete formData.data\n                        const formDataAsString = JSON.stringify(formData, null, 4)\n                        this.setValue(formDataAsString)\n                    }\n                }\n            },\n\n            // Block of 3 buttons aligned horizontally\n            {\n                type: "block",\n                <span id="help-layout" class="code-help">display: "flex",\n                flexFlow: "row",</span>\n\n                // This config applies to the container's items\n                <span id="help-defaults" class="code-help">defaultConfig: {\n                    flex: 1,\n                    margin: "5px",\n                    borderRadius: "32px",\n                    color: "#ffffff",\n                    iconColor: "#ffffff",\n                    iconSize: "14px",\n                    padding: "8px 10px 8px 10px"\n                },</span>\n                \n                items: [\n                    {\n                        <span id="help-button" class="code-help">type: "button",</span>\n                        text: "Click to swing!",\n                        backgroundColor: "#2e1d80",\n                        backgroundColorHover: "#4e3da0",\n                        <span id="help-font-awesome" class="code-help">icon: "fas fa-sync-alt",</span>\n                        events: {\n                            onclick: () => {\n                                const demoPanel = $("demo-panel")\n                                <span id="help-animation" class="code-help">demoPanel.setAnimation("swing")</span>\n                            }\n                        }\n                    },</div><div class="code-block">\n                    {\n                        type: "button",\n                        text: "Click to shake!!",\n                        backgroundColor: "#8c4bff",\n                        backgroundColorHover: "#bc7bff",\n                        icon: "fas fa-arrows-alt-h",\n                        <span id="help-override" class="code-help">iconSize: "1vw",</span>\n                        events: {\n                            onclick: () => {\n                                $("demo-panel").setAnimation("shakeX")\n                            }\n                        }                 \n                    },</div><div class="code-block">\n                    {\n                        type: "button",\n                        text: "Squeeze that code",\n                        backgroundColor: "#00aaee",\n                        backgroundColorHover: "#30dafe",\n                        icon: "fas fa-star",\n                        events: {\n                            onclick: () => {\n                                $("code-example").scrollIntoView({behavior: "smooth"})\n                                $("code-example").setAnimation({name: "jello", speed: "fast"})\n                            }\n                        }\n                    }</div>\n                ]\n            }\n        ]\n    })`;const tip=txt=>`<div class="code-tip">`+txt+`</div>`;texts.helpSimpleApi=tip(`To create a panel like the one opposite, just write <b>createPanel</b> and set a few options.<br><br>KissJS allows to create components with simple functions like:<br>- createTextField<br>- createCheckbox<br>- createSelect<br>- createButton<br>- createPanel<br>- etc...<br><br>Not too complex?`);texts.helpItems=tip(`Containers like this panel can embed items, or other containers.<br><br>Containers are:<br>- block (= a simple div block used for layout purpose)<br>- panel (like the one floating on the right)<br>`);texts.helpEvents=tip(`You can attach any W3C event to your components`);texts.helpFields=tip(`You can create your form fields like this.<br><br>KissJS supports all common field types like:<br>- text<br>- textarea<br>- number<br>- date<br>- checkbox<br>- select...</b>`);texts.helpSelect=tip(`A field of type Select has a bunch of cool features, like: <br>- auto-complete<br>- single or multiple values<br>- option colors<br>- deleting values with the mouse<br>- switching values on and off<br>- ...`);texts.helpCheckbox=tip(`A Checkbox can have many shapes, like checkbox, switch, star...`);texts.helpLayout=tip(`Containers like <b>block</b> and <b>panel</b> can be nested and use flex layout to organize the contained items.`);texts.helpButton=tip(`Creating a button with an icon is as simple as that...`);texts.helpW3C=tip(`We follow W3C conventions whenever it's possible, so you just have to know Javascript, HTML and CSS.`);texts.helpFontAwesome=tip(`At the moment, we like to use <b>Font Awesome</b> for our icons classes.<br>We might support other libraries in the future.`);texts.helpAnimation=tip(`Out-of-the-box CSS animations`);texts.helpDefaults=tip(`It's possible to set default settings for all the items of a container. Here, it's applied to the 3 buttons.`);texts.helpPubsub=tip(`KissJS provides a native PubSub mechanism to broadcast events and data on channels.`);texts.helpSubscriptions=tip(`A component can be subscribed to one or more PubSub channels and react accordingly`);texts.helpOverride=tip(`A default config can be overriden for a specific item`);return createBlock({hidden:kiss.tools.isMobile(),id:id,target:target,class:"craft-background",layout:"vertical",items:[{id:"code-example",type:"html",class:"code-feature",html:`<div class="stripe-title">Write dumb code.<br>Get results.</div>\n                <pre id="demo-code" class="code-sample"></pre>\n                `}]})}});kiss.app.defineView({id:"live-test",renderer:function(id){const defaultCode=`// Creates a panel, which is one of the 2 kinds of containers\n{\n    id: "my-panel",\n    type: "panel",\n    title: "This is a live code test",\n    icon: "fas fa-code",\n    closable: true,\n    layout: "vertical",\n    width: 600,\n    margin: "20px auto",\n\n    // Default config is applied to all items of the container\n    defaultConfig: {\n        labelPosition: "top",\n        width: "100%"\n    },\n    \n    items: [\n        // Dropdown list field\n        {\n            id: "dropdown",\n            type: "select",\n            label: "List of options",\n            multiple: true,\n            allowClickToDelete: true,\n            value: "B",\n            options: [{\n                    color: "#00aaee",\n                    label: "Blue",\n                    value: "B"\n                },\n                {\n                    color: "#a1ed00",\n                    label: "Green",\n                    value: "G"  \n                }\n            ],\n            \n            // Manage events\n            events: {\n                change: function() {\n                    const newColors = this.getValue()\n\n                    // Publish a message on the "COLOR_CHANGED" channel\n                    if (newColors.includes("B")) {\n                        publish("COLOR_CHANGED", "#00aaee")\n                    }\n                    else if (newColors.includes("G")) {\n                        publish("COLOR_CHANGED", "#a1ed00")\n                    }\n                    else {\n                        publish("COLOR_CHANGED", "#123456")\n                    }\n                }\n            }\n        },\n        \n        // Checkbox field\n        {\n            id: "cb",\n            type: "checkbox",\n            label: "Check me",\n            shape: "switch",\n            value: true,\n            iconColorOn: "red"\n        },\n        \n        // Rating field\n        {\n            id: "rating",\n            type: "rating",\n            label: "Note",\n            value: 3\n        },\n        \n        // Button bar (block container with horizontal layout)\n        {\n            layout: "horizontal",\n\n            defaultConfig: {\n                type: "button",\n                flex: 1,\n                margin: 5\n            },\n            \n            items: [\n                {\n                    text: "Set random values",\n                    icon: "fas fa-random",\n                    action: () => {\n                        const newCheckboxState = !$("cb").getValue()\n                        $("cb").setValue(newCheckboxState)\n                        \n                        const newRating = ($("rating").getValue() + 1) % 6\n                        $("rating").setValue(newRating)\n                        \n                        const currentColors = $("dropdown").getValue()\n                        const newColors = (currentColors.includes("G")) ? ["B"] : ["G"]\n                        $("dropdown").setValue(newColors)\n                        \n                        const formValues = $("my-panel").getData()\n                        console.log(formValues)\n                    }\n                }\n            ]\n        }\n    ],\n    \n    subscriptions: {\n        // Subscribe the panel to the "COLOR_CHANGED" channel\n        COLOR_CHANGED: function(messageData) {\n            $("my-panel").setHeaderBackgroundColor(messageData)\n        }\n    }\n}`;return createPanel({id:id,layout:"horizontal",height:"100vh",title:"Live test",icon:"fas fa-code",padding:0,border:0,borderRadius:"0 0 0 0",styles:{"panel-header":"background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(50,9,121,1) 35%, rgba(0,212,255,1) 100%);"},events:{close:()=>kiss.router.navigateTo("landing-page")},items:[{layout:"vertical",flex:1,height:"100%",items:[{layout:"horizontal",defaultConfig:{type:"button",flex:1,margin:"5px 0px 5px 5px",background:"#00aaee",color:"white",iconColor:"white"},items:[{icon:"fas fa-arrow-left",maxWidth:"45px",action:()=>kiss.router.navigateTo({ui:"landing-page"})},{text:"Save code",icon:"fas fa-save",action:function(){const code=$("code").getValue();localStorage.setItem("code",code);this.setAnimation({name:"zoomIn",speed:"faster"})}},{text:"Restore saved code",icon:"fas fa-share",action:()=>{const lastCode=localStorage.getItem("code");$("code").setValue(lastCode)}},{text:"Reset",icon:"fas fa-bolt",action:()=>{$("code").setValue(defaultCode)}}]},{id:"code",type:"codeEditor",height:"calc(100vh - 85px)",fieldHeight:"calc(100vh - 85px)",width:"100%",fieldWidth:"100%",value:defaultCode,events:{change:()=>$(id).updateOutput()}}]},{id:"output",type:"html",flex:1,overflow:"auto",margin:"0 0 0 10px",boxShadow:"var(--shadow-4)"}],methods:{load(){this.updateOutput()},updateOutput(){try{const codeAsAstring=$("code").getValue();const code=Function('"use strict"; return ('+codeAsAstring+")")();$("output").innerHTML="";createBlock({target:"output",width:"100%",height:"100%",items:[code]}).render();$(id).panelHeader.style.background="linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(50,9,121,1) 35%, rgba(0,212,255,1) 100%)";$(id).setTitle("Live test - All good 🙂")}catch(err){$(id).panelHeader.style.background="var(--red)";$(id).setTitle("Live test - Error 😢")}}}})}});kiss.app.defineView({id:"timeline-content",renderer:function(id,target){let fakeModelTemplate=createFakeModel("timeline");fakeModelTemplate.id="fakeTimeline";let fakeModel=new kiss.data.Model(fakeModelTemplate);let fakeCollection=fakeModel.collection;let columns=fakeModel.getFieldsAsColumns();columns.forEach((column=>{column.hidden=!["gameName","category","platform","reviewed"].includes(column.id)}));let timeline=createTimeline({id:"myTimeline",color:"#00aaee",collection:fakeCollection,columns:columns,colorField:"category",startDateField:"releaseDate",endDateField:"reviewDate",canEdit:true,canAddField:false,canEditField:false,canCreateRecord:true,height:()=>kiss.screen.current.height-50,actions:["-",{text:"Sort by Category (asc) and Platform (desc)",icon:"fas fa-sort",action:()=>{$("myTimeline").sortBy([{category:"asc"},{platform:"desc"}])}},{text:"Group by Category and Platform",icon:"far fa-clone",action:()=>{$("myTimeline").groupBy(["category","platform"])}},{text:"Add 200 records...",icon:"fas fa-database",action:()=>{fakeCollection.hasChanged=true;fakeCollection.insertFakeRecords(200);createNotification("Records inserted!")}}],methods:{selectRecord:async record=>createForm(record,fakeModel),async createRecord(model){record=model.create();const success=await record.save();if(!success)return;createForm(record)}}});return createBlock({id:id,target:target,style:"user-select: none; background: #ffffff;",height:"100%",items:[timeline],methods:{load:()=>{if(fakeCollection.records.length>0)return;const fields=fakeModel.getFields();let fakeRecords=kiss.db.faker.generate(fields,200);fakeRecords.forEach((record=>{const releaseDate=new Date(record.releaseDate);const delay=Math.floor(Math.random()*30)+1;record.reviewDate=kiss.formula.ADJUST_DATE(releaseDate,0,0,delay,0,0,0)}));kiss.db.insertMany("fakeTimeline",fakeRecords)}}})}});kiss.doc.timelines=`\nKissJS timelines allow you to visualize your tasks and events in a timeline view.\n`;kiss.app.defineView({id:"timeline-menu",renderer:function(id,target){return createBlock({id:id,target:target,defaultConfig:{height:40,textAlign:"left",iconSize:"18px",iconColor:"#8aa2c8",borderColor:"#e3e5ec",borderWidth:"1px 0px 0px 0px",borderRadius:"0px",backgroundColor:"#f3f5f7",colorHover:"#00aaee",iconColorHover:"#00aaee",backgroundColorHover:"#e5e9ec"},layout:"vertical",items:[{type:"html",html:"Timeline",class:"navigation-title"},{type:"button",text:"Example with 1000 records",icon:"fas fa-info",action:()=>kiss.router.navigateTo({anchor:"Introduction about KissJS timeline"})},{type:"button",text:"Back to Home",icon:"fas fa-arrow-left",fontWeight:"bold",action:()=>kiss.router.navigateTo({ui:"start",section:"home"})}]})}});kiss.app.defineView({id:"tutorials-content",renderer:function(id,target){return createBlock({id:id,target:target,styles:{this:"user-select: none;"},items:[{background:"#ffffff",defaultConfig:{labelWidth:200,labelPosition:"left"},items:[showCase(kiss.doc.tutorial_01_title,kiss.doc.tutorial_01,{demo:true,url:"./tutorials/tutorial_01/index.html"}),showCase(kiss.doc.tutorial_02_title,kiss.doc.tutorial_02,{demo:true,url:"./tutorials/tutorial_02/index.html"}),showCase(kiss.doc.tutorial_03_title,kiss.doc.tutorial_03,{demo:true,url:"./tutorials/tutorial_03/index.html"}),showCase(kiss.doc.tutorial_04_title,kiss.doc.tutorial_04,{demo:true,url:"./tutorials/tutorial_04/index.html"}),showCase(kiss.doc.tutorial_05_title,kiss.doc.tutorial_05),showCase(kiss.doc.tutorial_06_title,kiss.doc.tutorial_06,{demo:true,url:"./tutorials/tutorial_06/index.html"}),showCase(kiss.doc.tutorial_07_title,kiss.doc.tutorial_07,{demo:true,height:800,url:"./tutorials/tutorial_07/index.html"}),showCase(kiss.doc.tutorial_08_title,kiss.doc.tutorial_08,{demo:true,height:800,url:"./tutorials/tutorial_08/index.html"}),showCase(kiss.doc.tutorial_09_title,kiss.doc.tutorial_09,{demo:true,height:800,url:"./tutorials/tutorial_09/index.html"})]}]})}});kiss.doc.tutorial_01_title="01 - Using UI components";kiss.doc.tutorial_01=`KissJS comes with a few pre-built components that will help you build a user interface **programmatically**.\nBuilding an interface **programmatically** means you can use complex logic to build any user interface using only Javascript.\nThis tutorial demonstrates how to create a "Hello World" modal window, containing a **form** with some **fields** and a **button**.\nYou can see the live demo below.\n\nNow, let's explain this tutorial step by step.\nFirst of all, we create 3 types of fields (text, date, checkbox):\n\n    // Build a text field\n    const myTextField = createTextField({\n        label: "I'm a text field",\n        placeholder: "Enter something",\n        labelWidth: 200,\n        fieldWidth: 300\n    })\n\n    // Build a date field\n    const myDateField = createDateField({\n        label: "I'm a date field",\n        labelWidth: 200,\n        fieldWidth: 300\n    })\n\n    // Build a checkbox field\n    const myCheckbox = createCheckbox({\n        label: "I'm a checkbox",\n        shape: "switch", // Try "check", "square", "circle", "star"\n        iconColorOn: "#3bc48c",\n        iconColorOff: "#cccccc",\n        labelWidth: 200,\n        fieldWidth: 300\n    })\n\nThen, we create a **container** to embed those 3 fields.\nKissJS containers are **Blocks** or **Panels**.\nThey can have embedded **items**.\n\nIn the example below, note how:\n* we created a **Block** element\n* we inserted our 3 previous fields into the **items** property of the block\n* we inserted a 4th field directly using its JSON configuration: not only it's possible, but it's the recommanded practice\n\n\n    // Build a block containing the previous fields\n    //\n    // Note:\n    // All containers have an "items" property which is just an array of contained items.\n    // Containers can have nested containers too, allowing you to split your layout hierarchically.\n    const myForm = createBlock({\n        id: "sample-form-id",\n\n        // The array of contained items\n        items: [\n            myTextField,\n            myDateField,\n            myCheckbox,\n\n            // We can also add components directly by inserting their JSON configuration inline.\n            // Here, we create a "Select" field (= dropdown list = combobox)\n            {\n                type: "select",\n                label: "I'm a select field",\n                value: ["Option A", "Option C"], // Default values\n\n                // "multiple: true" allows to select multiple values\n                multiple: true,\n\n                options: [{\n                        value: "Option A",\n                        color: "#00aaee"\n                    },\n                    {\n                        value: "Option B",\n                        color: "#3bc48c"\n                    },\n                    {\n                        value: "Option C",\n                        color: "#aa4422"\n                    }\n                ],\n                labelWidth: 200,\n                fieldWidth: 300\n            }\n        ]\n    })\n\nNow, we create a **button** component.\nTo manage the **click** event of the button, we use its **events** property.\nIn this example, clicking the button retrieves all the form values and display them in the console:\n\n    // Create a button\n    const myButton = createButton({\n        text: "Shake me to get the form values (check the console, too)",\n        icon: "fas fa-thumbs-up", // Font awesome icons\n        iconSize: "24px",\n        iconColor: "#00aaee",\n        \n        // CSS properties can be applied directly on the component\n        width: "100%",\n        margin: "20px 0px 0px 0px",\n        borderRadius: "20px 0px 20px 0px",\n\n        // The components can have an "events" property to manage all the W3C DOM events\n        events: {\n\n            // Here, we want to capture the button "click" event.\n            // Note: you can use various conventions for event names because the event name is normalized internally: click, onclick, onClick\n            // You should always prioritize W3C standards, though\n            click: function(event) {\n\n                // Retrieves the form fields using the method "getFields"\n                const formFields = $("sample-form-id").getFields()\n                console.log(formFields)\n\n                // Retrieve only the form data using the method "getData"\n                const formData = $("sample-form-id").getData()\n                console.log(formData)\n\n                // Show JSON data inside a notification\n                const formDataAsJSON = JSON.stringify(formData, null, 4)\n                createNotification(formDataAsJSON)\n\n                // ... then shake the modal window, thanks to the embedded animation library\n                $("sample-draggable-window").setAnimation("shakeX")\n            }\n        }\n    })\n\nNow we have a **form** containing a few **fields**, and a **button** to retrieve the values.\nWe will create a **panel** to embed the form and the button in a clean layout.\n\n    // Now build a draggable window containing the form and the button\n    const myModal = createPanel({\n        id: "sample-draggable-window",\n        title: "Drag me",\n        draggable: true,\n        closable: true,\n\n        // W3C styles properties\n        top: "25%",\n        width: 500,\n        align: "center",\n        boxShadow: "10px 10px 10px #555555",\n\n        // It's also possible to target specific classes to style components and sub-components\n        styles: {\n            "this": "border-radius: 20px 5px 20px 5px", // Styling the base component (this)\n            "panel-header": "border-radius: 20px 5px 0px 0px" // Styling a sub-component\n        },\n\n        // ... and if you don't like having inline style in your component, you can just apply classes at any level\n        classes: {\n            "this": "my-panel-class", // The component itself\n            "panel-header": "my-panel-header",\n            "panel-body": "my-panel-body"\n        },\n\n        items: [\n            myForm,\n            myButton\n        ]\n    })\n\nUsing the method "createPanel" generated an HTMLElement which is *detached* from the DOM.\nTo display our panel, we must attach it to the DOM, which is done using the "render" method, like this:\n\n    myModal.render()\n\nWell done!\nYou've just created a simple UI using KissJS components, and you've learned how to create:\n- some fields (a Text field, a Date field, a Checkbox field, then a Select field)\n- a button, with custom attributes\n- a container (a simple Block and a nice Panel)\n`;kiss.doc.tutorial_02_title="02 - Creating an application view";kiss.doc.tutorial_02=`When you create a Web application, you generally need multiple **views**.\n\nIn KissJS, a view is simply a **function that returns an <a href="https://developer.mozilla.org/fr/docs/Web/API/HTMLElement">HTMLElement</a>**.\nAnd that's really all you have to know.\nIt can be anything from a very simple element to a complex layout with many components and nested components.\n\nLet's see how to create a **view** with KissJS:\n\n1. Add your view function to your app, using **kiss.app.defineView**:\n\n\n    kiss.app.defineView({\n        id: "dummy",\n        renderer: function (id, target) {\n        // ... put your code here, then return an HTMLElement\n        }\n    })\n\nThis will push your view function into a repository containing all your view functions.\nWe call this repository the **View manager**.\nThe view manager will handle a few tricks for you, like showing/caching/hiding/cleaning your views in an easy manner.\n \n2. Create an HTML Element inside your view function.\nIt can be any standard HTML (div, span, p, table...) or a custom Web Component as well:\n\n\n    const myDummyElement = document.createElement("div")\n     \n3. IMPORTANT: set its **id** property\nThis will help KissJS keep track of this specific view.\n\n\n    myDummyElement.id = id\n\n4. OPTIONAL: set its **target** property.\nThis will tell KissJS WHERE you want to insert your view into the DOM:\n\n\n    myDummyElement.target = target\n\n5. Insert your content into your HTMLElement.\n\n\n    myDummyElement.innerHTML = "<center><h1>HELLO WORLD</h1></center>"\n     \n6. Return your HTMLElement.\nHey, this **is** your view!\n\n\n    return myDummyElement\n\n\nIf we put it all together, we have something like this:\n\n\n    kiss.app.defineView({\n        id: "dummy",\n        renderer: function (id, target) {\n            const myDummyElement = document.createElement("div")\n            myDummyElement.id = id\n            myDummyElement.target = target // Optional\n            myDummyElement.innerHTML = "<center><h1>HELLO WORLD</h1></center>"\n            return myDummyElement\n        }\n    })\n\n\nEach view can (and should) be stored in a separate file.\nWhen you want to display one of your views, call the **kiss.views.show** function using the **view id** as a parameter:\n\n\n    kiss.views.show("dummy")\n\n\nAs you are likely to use **kiss.views.show("...")** very often, you might want to create an alias function for it.\nOf course, it's really up to you.\nFor example:\n\n\n    const showView = kiss.views.show\n    showView("dummy")\n    \n`;kiss.doc.tutorial_03_title="03 - Multiple views and components";kiss.doc.tutorial_03=`We've seen before that a KissJS **view** must return an **HTMLElement**.\nAs KissJS components derive from HTMLElement, a view can directly return a KissJS component.\n\nThis demo illustrates:\n- how we can build our views using KissJS components\n- how we define multiple views\n- how we can switch views using methods of the **view manager**\n\nFor the sake of simplicity, we have defined 2 views in the same file, but separating views in different files is considered a better practice:\n\n    // Let's define View 1...\n    kiss.app.defineView({\n        id: "view1",\n        renderer: function (id, target) {\n\n            // The view will be a KissJS panel:\n            const myPanel = createPanel({\n                id: id,\n                title: "VIEW 1",\n                position: "absolute",\n                draggable: true,\n                align: "center",\n                boxShadow: "0px 0px 64px #223344",\n        \n                items: [\n                    {\n                        type: "html",\n                        html: "I'm the VIEW 1",\n                        padding: "20px",\n                        style: "text-align: center; font-size: 32px; color: #00aaee;"\n                    },\n                    {\n                        type: "button",\n                        text: "Click to jump to view 2",\n                        icon: "fas fa-rocket",\n                        iconSize: "32px",\n                        fontSize: "32px",\n                        padding: "20px",\n                        iconPadding: "0px 50px 0px 0px",\n                        \n                        // The button click event will replace view1 by view2\n                        events: {\n                            click: function() {\n                                kiss.views.replaceBy("view2")\n                            }\n                        }\n                    }\n                ]\n            })\n\n            // The view can return a KissJS Component\n            // (KissJS components derive from HTMLElement, so, they're considered as standard DOM elements)\n            return myPanel\n        }\n    })\n\n    // Let's define View 2...\n    kiss.app.defineView({\n        id: "view2",\n        renderer: function (id, target) {\n        \n            // We can directly return the KissJS panel...\n            return createPanel({\n                id: id,\n                title: "VIEW 2",\n                position: "absolute",\n                draggable: true,\n                align: "center",\n                headerBackgroundColor: "#7112FC",\n                boxShadow: "0px 0px 64px #223344",\n        \n                items: [\n                    {\n                        type: "html",\n                        html: "I'm the VIEW 2",\n                        padding: "20px",\n                        styles: {\n                            "this": "text-align: center; font-size: 32px; color: #7112FC"\n                        }                    \n                    },\n                    {\n                        type: "button",\n                        text: "Go back to view 1",\n                        icon: "fas fa-arrow-left",\n                        iconSize: "32px",\n                        fontSize: "32px",\n                        padding: "20px",\n                        iconPadding: "0px 50px 0px 0px",\n                        \n                        // Same as before, but using "action" as a shortcut to replace "events > click"\n                        // and also using arrow functions syntax (javascript ES6)\n                        // This is much shorter!\n                        action: () => kiss.views.replaceBy("view1")\n                    }\n                ]\n            })\n        }\n    })\n\nDisplaying the first view is done with the view manager **show** method:\n\n    kiss.views.show("view1")\n\nReplacing a view by another can be done using the view manager **replaceBy** method:\n\n    kiss.views.replaceBy("view2")\n\nAnd you get the result below:\n`;kiss.doc.tutorial_04_title="04 - Using external view controllers";kiss.doc.tutorial_04=`In some situations, putting all the logic directly inside the view definition can lead to long scripts that are difficult (and boring) to maintain.\nFor this, it's possible to separate the **view definition** and the **view controller** in separate files.\n \nThe **Controller** is automatically associated to the **View** if it has the same id.\n \nWhen you organize your files into your project, we suggest that you name your controller like your view, like below.\nOf course, it's really your decision here, nothing mandatory:\n \n    //\n    // yourView.js\n    //\n    kiss.app.defineView({\n        id: "**YOUR_VIEW_ID**",\n        renderer: function (id, target) {\n            // Your code here, which returns a HTMLElement\n        }\n    })\n\n    //\n    // yourView.controller.js\n    // Basically, it's just a list of methods that will be associated to your view\n    //\n    kiss.app.defineViewController("**YOUR_VIEW_ID**", {\n        method1: function() {\n            // ...\n        },\n        method2: function() {\n            // ...\n        }\n    })\n`;kiss.doc.tutorial_05_title="05 - Using the client router";kiss.doc.tutorial_05=`KissJS **client router** is a very convenient way to **navigate between views**.\nAs we've seen before, you can directly display a specific view using the syntax:\n\n    kiss.views.show("YOUR_VIEW_ID")\n\nBut you can also use the client router using this syntax:\n\n    kiss.router.navigateTo({\n        ui: YOUR_VIEW_ID\n    })\n\nWhat's the difference? A lot:\n- the router will display your view as the main **ui** *(ui = user interface)*\n- it will change the url #hash to .../index.html#ui=YOUR_VIEW_ID\n- it will push the url #hash change into the browser history, so that using the **back** button works fine\n\nThis has a few advantages listed below:\n## Single Page Application\nAs it manipulates the #hash and not the path, the page won't reload and you can use the router to build a SPA.\n\n## Deep linking\nThe **ui** parameter is required, but you can provide other parameters to the router, like this:\n\n    kiss.router.navigateTo({\n        ui: YOUR_VIEW_ID,\n        sectionId: "123",\n        chapterId: "456"\n    })\n\nThe url #hash will then change to **.../index.html#ui=YOUR_VIEW_ID&sectionId=123&chapterId=456**\nThis can be used to implement [deep linking](https://en.wikipedia.org/wiki/Deep_linking) in your application.\n\n## Application context\nThe current #hash parameters reflect the **context** of your application.\nTo know this context, you can use the following syntax:\n\n    const context = kiss.router.getRoute()\n\nIt will return an object like this:\n\n    {\n        ui: YOUR_VIEW_ID,\n        sectionId: "123",\n        chapterId: "456"\n    }\n\nThis way, you can use the router to handle some of your global application states.\n\n## It also works offline\nKissJS client router works perfectly with local file path (file:///C:/project/index.html#ui=start)\nIt means you can start coding an SPA with multiple views and files **without any server at all**.\nYou just need a code editor and you're good!\n\n## It's asynchronous\nThe **route()** method is async, so you can do stuff like:\n\n    kiss.router.navigateTo({\n        ui: YOUR_VIEW_ID\n    })\n    .then(doSomethingElse)\n\nTo see the router in action:\n- <a href="./tutorials/tutorial_05/index.html" target="_new">open this demo</a>\n- keep an eye on the url\n- check the javascript console\n- play with the **back button** of your browser to see how the router updates your application without reloading the page\n`;kiss.doc.tutorial_06_title="06 - Using the built-in PubSub";kiss.doc.tutorial_06=`PubSub stands for **Publish/Subscribe** and is a core mechanism used by KissJS to establish communication between components.\n\nThe components which are **publishing** messages into a channel have absolutely no knowledge about the components that are **subscribed** to the channel.\nThis way, KissJS enforces a very loose coupling system.\n\nWe subscribe a function to a channel using **kiss.pubsub.subscribe**, or simply **subscribe**\n\n    subscribe(channelId, function(messageData) {\n        // ... do whatever you want with messageData\n    })\n\n\nWe publish a message on a channel using **kiss.pubsub.publish**, or simply **publish**\n\n    publish(channelId, messageData)\n\nThe message data can be *anything*: a string, an object, an array, a class instance...\nIn the example below, we send JSON data in the channel "EVT_USER_RENAMED":\n\n    publish("EVT_USER_RENAMED", {\n        userId: 123,\n        newName: "Bob Wilson"\n    })\n\nAny function subscribed to the channel "EVT_USER_RENAMED" will receive our JSON as an input parameter:\n\n    subscribe("EVT_USER_RENAMED", function(messageData) {\n        console.log("User id: " + messageData.userId)\n        console.log("New user name: " + messageData.newName)\n    })\n\n\nYou can use PubSub for any purpose, and not only for KissJS components.\nKissJS components have a built-in mechanism to easily subscribe a component to one or more channels, thanks to the **subscriptions** property.\nFor example:\n\n    const fieldUsername = createTextField({\n        label: "User name",\n\n        // Here, we subscribe our text field component to 2 channels: "EVT_USER_RENAMED" and "EVT_USER_RESET"\n        subscriptions: {\n            \n            // The field will be updated when a message will be emitted on the channel "EVT_USER_RENAMED"\n            EVT_USER_RENAMED: function (msgData) {\n                const newUserName = msgData.newName\n                this.setValue(newUserName)\n            },\n\n            // We can also emit a message without any data:\n            EVT_USER_RESET: function() {\n                this.setValue("")\n            }\n        }\n    })\n `;kiss.doc.tutorial_07_title="07 - A Todo app in less than 200 lines";kiss.doc.tutorial_07=`\nThis next example shows how to build a simple Todo list application like the one demonstrated on TodoMVC website:\nhttp://todomvc.com/\n\nWithout all the comments, our Todo app is less than 200 lines of code, and you can:\n- add a Task\n- remove a Task\n- check / uncheck a Task\n- edit a Task name (double-click)\n- filter Tasks (All / Active / Completed)\n- display a Status (ex: 7 items left)\n- export Tasks status as JSON\n`;kiss.doc.tutorial_08_title="08 - A Todo app using MVC";kiss.doc.tutorial_08=`\nIn the previous tutorial, we built a simple and monolithic Todo app to show how easy it is to create a small application using **KissJS**.\nHere, we'll build another one using the clean **MVC** pattern.\n\nA few notes:\n- We have split the code into 3 files: **model**, **view**, **controller**, and **index** makes the glue between them.\n\n- **Model**: KissJS embeds an ORM (Object-Relational Mapping) and a persistent offline database supporting standard NoSQL operations using MongoDb syntax.\nDefining a **Task** model automatically generates:\n    - a Model instance in **kiss.app.models.task**\n    - a Collection of tasks in **kiss.app.collections.task**\n\n- **View**: the view is the user interface.\nIn this case, we have used 2 KissJS **panels** to display the tasks: one for the tasks to do, one for the tasks done.\n\n- **Controller**: the controller is the logic of the application. It's the **Controller** of the tasks.\nIt's responsible for:\n    - loading tasks from the database\n    - creating a new task\n    - updating a task status\n    - updating a task name\n    - removing a task\n\nThe view is automatically refreshed when the database is updated.\nThis is **not** due to data binding.\nThis is because KissJS provides a pubsub mechanism to notify the view when the database is updated.\nIn our case, the view is subscribed to the insert, update and delete events of the **Task** model.\n`;kiss.doc.tutorial_09_title="09 - Let's have fun with Talking blocks";kiss.doc.tutorial_09=`Our **talking blocks** are an interesting way to teach object oriented programming to beginners.\n\nIn this small application, you can click on 2 different blocks to make the 1st block jump on the 2nd one.\nThings become interesting when the target block already has other blocks over it.\nIn this situation, you'll see how the blocks are starting to "talk" together to find a solution to the problem, jumping everywhere.\nThe more blocks involved, the more fun!\n\nWhy is it interesting?\nBecause it shows that we only need 3 simple methods to make the auto-organization happen:\n- **goOver**: a block wants to go on another block\n- **freeYourself**: a block asks to a destination block to free itself from the block(s) over it\n- **goAway**: a block asks the block over itself to go away\n\nKissJS provides all the necessary stuff to:\n- create the block's **design**, using a simple **Html** component\n- embed the block's **logic**, using the component's **methods** property\n- react to mouse events, using the component's **events** property\n- animate the blocks using the built-in **showAt** method\n- create a **console** to display the "dialog" between blocks\n\nOn top of this, the demo makes extensive use of async/await to keep the logic in sync with the asynchronous animations.`;kiss.app.defineView({id:"tutorials-menu",renderer:function(id,target){return createBlock({id:id,target:target,defaultConfig:{height:40,textAlign:"left",iconSize:"18px",iconColor:"#8aa2c8",borderColor:"#e3e5ec",borderWidth:"1px 0px 0px 0px",borderRadius:"0px",backgroundColor:"#f3f5f7",colorHover:"#00aaee",iconColorHover:"#00aaee",backgroundColorHover:"#e5e9ec"},layout:"vertical",items:[{type:"view",id:"logo"},{type:"html",html:"Tutorials & demos",class:"navigation-title"},{type:"button",text:kiss.doc.tutorial_01_title,icon:"fas fa-user-graduate",action:()=>kiss.router.navigateTo({anchor:kiss.doc.tutorial_01_title})},{type:"button",text:kiss.doc.tutorial_02_title,icon:"fas fa-user-graduate",action:()=>kiss.router.navigateTo({anchor:kiss.doc.tutorial_02_title})},{type:"button",text:kiss.doc.tutorial_03_title,icon:"fas fa-user-graduate",action:()=>kiss.router.navigateTo({anchor:kiss.doc.tutorial_03_title})},{type:"button",text:kiss.doc.tutorial_04_title,icon:"fas fa-user-graduate",action:()=>kiss.router.navigateTo({anchor:kiss.doc.tutorial_04_title})},{type:"button",text:kiss.doc.tutorial_05_title,icon:"fas fa-user-graduate",action:()=>kiss.router.navigateTo({anchor:kiss.doc.tutorial_05_title})},{type:"button",text:kiss.doc.tutorial_06_title,icon:"fas fa-user-graduate",action:()=>kiss.router.navigateTo({anchor:kiss.doc.tutorial_06_title})},{type:"button",text:kiss.doc.tutorial_07_title,icon:"fas fa-user-graduate",action:()=>kiss.router.navigateTo({anchor:kiss.doc.tutorial_07_title})},{type:"button",text:kiss.doc.tutorial_08_title,icon:"fas fa-user-graduate",action:()=>kiss.router.navigateTo({anchor:kiss.doc.tutorial_08_title})},{type:"button",text:kiss.doc.tutorial_09_title,icon:"fas fa-user-graduate",action:()=>kiss.router.navigateTo({anchor:kiss.doc.tutorial_09_title})},{type:"button",text:"Back to Home",icon:"fas fa-arrow-left",fontWeight:"bold",action:()=>kiss.router.navigateTo({section:"home",anchor:"What is KissJS?"})}]})}});
//# sourceMappingURL=build.min.js.map